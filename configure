#!/bin/sh

usage(){
    echo
    echo "No RTL or RTAI installations found, or incorrect option used."
    echo "Not configuring Makefile.inc"
    echo "If you have RTLinux or RTAI installed in a different path, use:"
    echo
    echo "Usage: ./configure rtdir=/usr/src/rtai"
    echo
    echo "Options:"
    echo "         rtdir=  - Path to the RTAI or RT-Linux directory"
    echo "         quiet  - Silent running of make"
    echo "         silent - Silent running of make"
    echo
    exit -1
}

echo

# Set up a few defaults first...
MAKEFLAGS="k"
RTDIR=""

# Test for command line arg(s)
for CLI in "$@"
do
    # Test to see if we have "rtdir=<something>"
    if [ "$(echo $CLI | awk '{split($1, A, "=")}{print A[1]}')" = "rtdir" ] ; then
	# yes, we have it, extract the <something> part
	RTDIR=$(echo $1 | awk '{split($1, A, "=")}{print A[2]}')
	#' A quick'n'dirty hack just in case we were passed a relative path.
	# As noted by Jonathan Stark, makes will fail further up the tree
	# when a -I../foo is encountered, so convert to an absolute.
	# Even if an invalid path is used, the error will be trapped when
	# the marker file is not found.
	RTDIR=$(cd $RTDIR ; pwd -P )
	# announce that we parsed the rtdir
	echo "RTDIR set to $RTDIR from command line"
    # test for 'silent' or 'quiet' options
    elif [ $CLI = "silent" ] || [ $CLI = "quiet" ] ; then
	MAKEFLAGS="ks"
    # if we get here we have an invalid option...
    else
	echo "Unknown option: $CLI"
	usage
	exit -1
    fi
done

# check for RTDIR from command line
if [ "$RTDIR" = "" ] ; then
    # None specified, so search for likely files..
    RTS=$(find /usr/src/ -maxdepth 2 -name "rtl.mk" -o -name ".buildvars" 2> /dev/null)
    if [ "$RTS" = "" ] ; then
	usage
	exit 1
    fi
    # Found something, so check for rtl.mk
    for rtl in $RTS ; do
        RTL=$(echo $rtl | grep rtl.mk | sed s^/rtl.mk^^g)
        if [ "$RTL" != "" ] ; then
	    RTDIR=$RTL
	fi
    done
    if [ "$RTDIR" = "" ] ; then
    # or .buildvars
	for rtai in $RTS ; do
	    RTAI=$(echo $rtai | grep buildvars | sed s^/.buildvars^^g)
	    if [ "$RTAI" != "" ] ; then
		RTDIR=$RTAI
	    fi
	done
    fi
    # announce what we found
    echo "RTDIR set to $RTDIR by search"
fi
# command line parsing finished

# check RTDIR for a valid RTOS signature
if [ ! -f $RTDIR/rtl.mk ] ; then
    if [ ! -f $RTDIR/.buildvars ] ; then
    # no rtai or rtlinux signatures found, then exit..
        echo "No RTAI or RTLinux signatures found in $RTDIR"
        usage
	exit -1
    fi
fi

# Go on to write out the Makefile.inc
DATE=$(date)

echo "# DO NOT EDIT THIS FILE ! Automatically generated by :" > Makefile.inc
echo "# ./configure $@" >> Makefile.inc
echo "# on $DATE" >> Makefile.inc
echo >> Makefile.inc
echo "# Makefile add-ons from ./configure" >> Makefile.inc
echo >> Makefile.inc
echo "# Directories" >> Makefile.inc
echo "# -----------" >> Makefile.inc
echo >> Makefile.inc
echo "EMC2_HOME = $(pwd)" >> Makefile.inc
echo "BIN_DIR = \$(EMC2_HOME)/bin" >> Makefile.inc
echo "LIB_DIR = \$(EMC2_HOME)/lib" >> Makefile.inc
echo "RTLIB_DIR = \$(EMC2_HOME)/rtlib" >> Makefile.inc
echo "INC_DIR = \$(EMC2_HOME)/include" >> Makefile.inc
echo "TMP_DIR = \$(EMC2_HOME)/src/.tmp" >> Makefile.inc
echo "RTTMP_DIR = \$(EMC2_HOME)/src/.rt_tmp" >> Makefile.inc
echo "RTDIR = $RTDIR" >> Makefile.inc
echo >> Makefile.inc
if [ -f $RTDIR/.buildvars ] ; then
    RTFILE=$RTDIR/.buildvars
    echo found an RTAI installation in $RTDIR
    echo "RTNAME = rtai" >> Makefile.inc
    echo "RTPREFIX = rtai" >> Makefile.inc
    echo "RTAI = 1" >> Makefile.inc
# Added a "sed s/' = '/'='/" here (and elsewhere) because the awk split
# fails when it finds "FOO = bar" - So we need to make sure it finds
# "FOO=bar" instead.
    KERNEL=$(cat $RTFILE | grep LINUXDIR | sed s/' = '/'='/ | awk '{split($1, A, "=")}{print A[2]}') 2> /dev/null
#'
    KERNELDIR=$(cd $KERNEL ; pwd -P )
else
    if [ -f $RTDIR/rtl.mk ] ; then
        RTFILE=$RTDIR/rtl.mk
        echo found an RTLinux installation in $RTDIR
        echo "RTNAME = RT-Linux" >> Makefile.inc
        echo "RTPREFIX = rtl" >> Makefile.inc
        echo "RTLINUX = 1" >> Makefile.inc
# There is probably a better way of doing this without using sed !
    KERNEL=$(cat $RTFILE | grep RTLINUX_DIR | sed s/' = '/'='/ | awk '{split($1, A, "=")}{print A[2]}') 2> /dev/null
#'
    KERNELDIR=$(cd $KERNEL ; pwd -P )
    fi
fi
echo "KERNELDIR = $KERNELDIR" >> Makefile.inc
cat $RTFILE | grep CFLAGS | sed s/CFLAGS/RTFLAGS/ >> Makefile.inc
echo "RTFLAGS := -I\$(INC_DIR) -I$RTDIR/include -I. \$(RTFLAGS) -DRTAPI" >> Makefile.inc
CC=$(cat $RTFILE | grep CC | sed s/' = '/'='/ | awk '{split($1, A, "=")}{print A[2]}') 2> /dev/null
#'
if [ $CC="" ] ; then
    CC=cc
fi

# RTAI doesn't like gcc 2.96
$CC -v 2> configure.tmp
CCVER=$(cat configure.tmp | grep version)
if [ "$(echo $CCVER | grep 2.96)" ] ; then
    echo "RTAI doesn't like $CCVER"
    echo "Looking for alternate"
    egcs -v 2> configure.tmp
    CCVER=$(cat configure.tmp | grep version)
    if [ "$CCVER" ] ; then
        echo "Found egcs = $CCVER"
        CC=egcs
    else
        echo "Uh oh, couldn't find alternate compiler"
	echo " Please make sure kgcc from the compat-egcs package is installed"
	echo " and the kernel & realtime extensions where compiled with it."
        exit -1
    fi
fi
rm -f configure.tmp

if [ $RTFILE = "$RTDIR/rtl.mk" ] ; then
    echo "ULFLAGS = -Wall -g -I\$(INC_DIR) -I\$(INCLUDE) -I. -DULAPI -O2" >> Makefile.inc
else
    echo "ULFLAGS = -Wall -g -I\$(INC_DIR) -I$RTDIR/include -I. -DULAPI -O2" >> Makefile.inc
fi

echo "CC = $CC" >> Makefile.inc
echo >> Makefile.inc
echo "# Additional flags and settings from $RTFILE" >> Makefile.inc
echo >> Makefile.inc
cat $RTFILE | grep -v CFLAGS | grep -v CC >> Makefile.inc
echo >> Makefile.inc
echo "# Automatically generated default options." >> Makefile.inc
echo >> Makefile.inc
echo "AR = ar" >> Makefile.inc
echo "ARFLAGS = cr" >> Makefile.inc
echo "CXX = g++" >> Makefile.inc
echo "CXXFLAGS = \$(CFLAGS)" >> Makefile.inc
echo "LD = \$(CC)" >> Makefile.inc
echo "LDFLAGS = " >> Makefile.inc
echo "MAKEFLAGS = $MAKEFLAGS" >> Makefile.inc
echo "RANLIB = ranlib" >> Makefile.inc
echo "RANLIBFLAGS = " >> Makefile.inc
echo >> Makefile.inc

for i in bin include lib rtlib ; do
 if [ ! -d $i ] ; then
   mkdir $i
 fi
done

# terminate normally
exit 0

