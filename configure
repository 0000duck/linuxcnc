#!/bin/sh

usage(){
    echo
    echo "No RTL or RTAI installations found, or incorrect option used."
    echo "Not configuring Makefile.inc"
    echo "If you have RTLinux or RTAI installed in a different path, use:"
    echo
    echo "Usage: ./configure rtdir=/usr/src/rtai"
    echo
    echo "Options:"
    echo "         rtdir=  - Path to the RTAI or RT-Linux directory"
    echo "         quiet  - Silent running of make"
    echo "         silent - Silent running of make"
    echo
    echo "         gtk=xxx - Set preferred GTK lib version"
    echo "            xxx can be '1.2', '2.0', '2.2', or 'none'"
    echo
    exit -1
}

echo

# Set up a few defaults first...
MAKEFLAGS="k"
RTDIR=""
GTK_VER=""
EXAMPLES="no"

# Test for command line arg(s)
for CLI in "$@"
do
    # Test to see if we have "rtdir=<something>"
    if [ "$(echo $CLI | awk '{split($1, A, "=")}{print A[1]}')" = "rtdir" ] ; then
	# yes, we have it, extract the <something> part
	RTDIR=$(echo $1 | awk '{split($1, A, "=")}{print A[2]}')
	#' A quick'n'dirty hack just in case we were passed a relative path.
	# As noted by Jonathan Stark, makes will fail further up the tree
	# when a -I../foo is encountered, so convert to an absolute.
	# Even if an invalid path is used, the error will be trapped when
	# the marker file is not found.
	RTDIR=$(cd $RTDIR ; pwd -P )
	# announce that we parsed the rtdir
	echo "RTDIR set to $RTDIR from command line"
    #
    # test for 'silent' or 'quiet' options
    elif [ $CLI = "silent" ] || [ $CLI = "quiet" ] ; then
	MAKEFLAGS="ks"
    #
    # test for GTK version
    elif [ $CLI = "gtk=1.2" ] ; then
	GTK_VER="1.2"
    elif [ $CLI = "gtk=2.0" ] ; then
	GTK_VER="2.0"
    elif [ $CLI = "gtk=2.2" ] ; then
	GTK_VER="2.2"
    elif [ $CLI = "gtk=none" ] ; then
	GTK_VER="none"
    #
    # if we get here we have an invalid option...
    else
	echo "Unknown option: $CLI"
	usage
	exit -1
    fi
done
# command line parsing finished

#
# take care of GTK config
#
if [ $GTK_VER ] ; then
    # user specified something
    echo "GTK version set to '$GTK_VER' from command line"
    # make sure the requested version is available
    if [ $GTK_VER = "1.2" ] ; then
	# check for the presence of gtk-config
	if ! type gtk-config 2>/dev/null >/dev/null ; then
	    echo "ERROR: GTK+ version 1.2 not installed"
	    usage
	    exit 1
	fi
    elif [ $GTK_VER = "2.0" ] || [ $GTK_VER = "2.2" ] ; then
	# first make sure pkg-config is installed
	if ! type pkg-config 2>/dev/null >/dev/null ; then
	    # if pkg-config is absent, then GTK-2.x is also absent
	    echo "ERROR:  GTK+ version $GTK_VER not installed"
	    usage
	    exit 1
	elif ! pkg-config gtk+-$GTK_VER --exists ; then
	    # pkg-config can't find the .pc file
	    echo "ERROR:  GTK+ version $GTK_VER not installed"
	    usage
	    exit 1
	fi
    fi
    # if we get here, the GTK version specified by the user exists,
    # (or the user specified "none")
else
    # user didn't indicate a preference, find out what's installed
    GTK_VER="none"
    # check for 1.2 installed
    if type gtk-config 2>/dev/null >/dev/null ; then
	# found gtk-config, that means GTK 1.2 is installed
	GTK_VER="1.2"
    elif type pkg-config 2>/dev/null >/dev/null ; then
	# found pkg-config, that means GTK 2.x _might_ be installed
	if pkg-config gtk+-2.0 --exists ; then
	    # found the .pc file for gtk-2.0
	    GTK_VER="2.0"
	elif pkg-config gtk+-2.2 --exists ; then
	    # found the .pc file for gtk-2.2
	    GTK_VER="2.2"
	fi
    fi
    echo "GTK version set to '$GTK_VER' by search"
fi


#
# check for RTDIR from command line
#
# Test for RTAI-3.0
RTAI_DIR=$($RTDIR/rtai-config --prefix 2> /dev/null)
if [ "$RTAI_DIR" = "" ] ; then
    RTAI_DIR=$($RTDIR/bin/rtai-config --prefix 2> /dev/null)
    if [ "$RTAI_DIR" = "" ] ; then
	# See if it is in the path...
	RTAI_DIR=$(rtai-config --prefix 2> /dev/null)
	if [ "$RTAI_DIR" = "" ] ; then
	    # try the default...
	    RTAI_DIR=$(/usr/realtime/bin/rtai-config --prefix 2> /dev/null)
	fi
    fi
fi
if [ "$RTAI_DIR" != "" ] ; then
    if [ "$RTDIR" = "" ] ; then
	echo "RTDIR set to $RTAI_DIR (Kilauea) by search"
    fi
    RTDIR=$RTAI_DIR
    RTAI_VER=$($RTDIR/bin/rtai-config --version)
    if [ $RTAI_VER = 3.0 ] ; then
	RTAI_VER=3
    fi
fi

if [ "$RTDIR" = "" ] ; then
# None specified, so search for likely files..
    # Check for RTLinux installed in it's default dir /usr/rtlinux
    RTS=$(find /usr/rtlinux* -maxdepth 1 -name "rtl.mk" 2> /dev/null | head -n1)
    if [ "$RTS" = "" ] ; then
        # Else check the /usr/src dir..
        RTS=$(find /usr/src/ -maxdepth 2 -name "rtl.mk" -o -name ".buildvars" 2> /dev/null)
        if [ "$RTS" = "" ] ; then
	    echo "No realtime component installed"
#	    usage
#	    exit 1
        fi
    fi
    # Found something, so check for rtl.mk
    for rtl in $RTS ; do
	RTL=$(echo $rtl | grep rtl.mk | sed s^/rtl.mk^^g)
	if [ "$RTL" != "" ] ; then
	    RTDIR=$RTL
	fi
    done
    if [ "$RTDIR" = "" ] ; then
	# or .buildvars
	for rtai in $RTS ; do
	    RTAI=$(echo $rtai | grep buildvars | sed s^/.buildvars^^g)
	    if [ "$RTAI" != "" ] ; then
	        RTDIR=$RTAI
                RTAI_VER=1
	    fi
	done
    fi
    # announce what we found
    echo "RTDIR set to $RTDIR by search"
fi

#
# check RTDIR for a valid RTOS signature
#
if [ ! -f $RTDIR/rtl.mk ] && \
    [ ! -f $RTDIR/bin/rtai-config ] && \
    [ ! -f $RTDIR/.buildvars ] ; then
	# no rtai or rtlinux signatures found, then exit..
    echo "No RTAI or RTLinux signatures found in $RTDIR"
#    usage
#    exit -1
fi

# try to find out where man files are stored on this system.
# 'man -w' returns the search paths used by older versions of man,
# but not with man-2.4.1... Use manpath instead to print the search
# path used by man - We take the first directory listed.
#
# Note: Need a CLI option for alternative man directories...
#
MANDIR=$(manpath | awk -F: '{ print $1 }')
# test the result, make sure it's a directory
if [ ! -d $MANDIR ] ; then
    MANDIR=
else
    echo "man pages will be installed in $MANDIR"
fi

# Search for the tcl/tk headers.
# Very simple to find out what flags & link options are required. Thoughtfully
# provided in tclConfig.sh & tkConfig.sh - Just need to find them !
#
# Note: Need a CLI option for alternative tcl/tk directories...
#
TCLCONFIG=$(find /usr/lib -maxdepth 2 -name tclConfig.sh 2>/dev/null | head -n1)
TKCONFIG=$(find /usr/lib -maxdepth 2 -name tkConfig.sh 2>/dev/null | head -n1)
if [ "$TCLCONFIG" != "" ] && [ "$TKCONFIG" != "" ] ; then
source "$TCLCONFIG"
source "$TKCONFIG"
#  echo "Reading from tclConfig.sh $(cat $TCLCONFIG | grep TCL_VERSION)"
  echo "Found tcl$TCL_VERSION"
  TCL_INC="-I$(find /usr/include/ -maxdepth 2 -name "tcl.h" 2> /dev/null | grep tcl.h | head -n1 | sed s^/tcl.h^^g)"
  if [ "$TCL_INC" = "-I/usr/include" ] || [ "$TCL_INC" = "-I" ] ; then
    TCL_INC=""  # No point in including the standard path..
  fi
  TK_INC="-I$(find /usr/include/ -maxdepth 2 -name "tk.h" 2> /dev/null | grep tk.h | head -n1 | sed s^/tk.h^^g)"
  if [ "$TK_INC" = "-I/usr/include" ] || [ "$TK_INC" = "-I" ] ; then
    TK_INC=""
  fi
fi

# Because some of the realtime kernel modules use floating point math
# which is not supported by standard kernel calls, we need to link to
# libm. RTAI provides a loadable module derived from uclibc (a minimal
# glibc implimentaion for embedded systems). Alternatively, we can link
# to dietlibc - Most distros package this as diet or dietlibc. Debian
# splits the headers and static libs into dietlibc-dev..
# If neither of the two preferred options are available, then the default
# GNU glibc math library will have to be used. This will cause problems
# if certain functions found in libc.so are not stubbed, hence the following
# tests and linking to mathstubs.o at a later stage.
#
# Note: Need to add a CLI option to pass the diet dir if it has been built
# from source, or the distro doesn't install in /usr/lib.
#
if [ -r $RTDIR/modules/rtai_libm.o ] || [ -r $RTDIR/modules/rtai_math.o ] || [ -r $RTDIR/modules/rtai_math.ko ]; then
    # Found a suitable kernel module..
    MATHLIB=
    USE_RTLIBM=1
    echo "Using RTAI's libm kernel module"
    if [ -r $RTDIR/modules/rtai_math.ko ]; then
      echo -e "\033[31m\033[5m Warning - You are compiling against a 2.6 series kernel.\033[0m"
    fi
# Note: need to search /lib/modules/`uname -r` for the math modules..
else
    echo "Testing for a suitable libm... Some symbols may be printed."
    # With RTAI we will assume that rtai_libm (or rtai_math) will
    # work. For RTLinux, a couple of tests need to be done.
    rm -f src/tests/mathtest.o src/tests/mathtest 2>/dev/null
    # compile a sample first.
    gcc -O -c src/tests/mathtest.c -o src/tests/mathtest.o

    DIET_DIR=$(find /usr/lib -maxdepth 2 -name diet* | head -n1)
    if [ "$DIET_DIR" != "" ] ; then
        # Run a test to see if it will work...
        ld -r -static src/tests/mathtest.o -o src/tests/mathtest -L$DIET_DIR/lib-i386 -lm
        if [ "$(nm -u src/tests/mathtest | grep -v ende)" = "" ] ; then
            echo "diet lib OK to use."
            USE_DIET=1
            MATHLIB="-L$DIET_DIR/lib-i386 -lm"
            MATHINC="-I$DIET_DIR/include"
        fi
    fi
    if [ "$USE_DIET" = "" ] ; then
        # Test the standard libm
    rm -f src/tests/mathtest 2>/dev/null
    ld -r -static src/tests/mathtest.o -o src/tests/mathtest -L/usr/lib -lm
        if ! nm -u src/tests/mathtest ; then
            echo "libm OK to use."
            USE_LIBM=1
            MATHLIB="-L/usr/lib -lm"
        else
            # We need to link to mathstubs if we are to use the glibc libm
            echo "Using glibc libm with mathstubs."
	    echo "If unresolved symbols are reported when loading kernel modules"
	    echo "please file a bug report."
            USE_LIBM=1
	    USE_STUBS=1
            MATHLIB="\$(RTTMP_DIR)/mathstubs.o -L/usr/lib -lm"
        fi
    fi
    rm -f src/tests/mathtest.o src/tests/mathtest 2>/dev/null
fi


# Go on to write out the Makefile.inc
DATE=$(date)

echo "# DO NOT EDIT THIS FILE ! Automatically generated by :" > Makefile.inc
echo "# ./configure $@" >> Makefile.inc
echo "# on $DATE" >> Makefile.inc
echo >> Makefile.inc
echo "# Makefile add-ons from ./configure" >> Makefile.inc
echo >> Makefile.inc
echo "# Directories" >> Makefile.inc
echo "# -----------" >> Makefile.inc
echo >> Makefile.inc
echo "EMC2_HOME = $(cd ../ ; pwd)" >> Makefile.inc
echo "BIN_DIR = \$(EMC2_HOME)/bin" >> Makefile.inc
echo "LIB_DIR = \$(EMC2_HOME)/lib" >> Makefile.inc
echo "RTLIB_DIR = \$(EMC2_HOME)/rtlib" >> Makefile.inc
echo "INC_DIR = \$(EMC2_HOME)/include" >> Makefile.inc
echo "TMP_DIR = \$(EMC2_HOME)/src/.tmp" >> Makefile.inc
echo "RTTMP_DIR = \$(EMC2_HOME)/src/.rt_tmp" >> Makefile.inc
echo "MAN_DIR = $MANDIR" >> Makefile.inc
echo "RTDIR = $RTDIR" >> Makefile.inc
echo >> Makefile.inc

if [ -f $RTDIR/.buildvars ] ; then
    RTFILE=$RTDIR/.buildvars
    echo found an RTAI installation in $RTDIR
    echo "RTNAME = rtai" >> Makefile.inc
    echo "RTPREFIX = rtai" >> Makefile.inc
    echo "RTAI = $RTAI_VER" >> Makefile.inc
# Added a "sed s/' = '/'='/" here (and elsewhere) because the awk split
# fails when it finds "FOO = bar" - So we need to make sure it finds
# "FOO=bar" instead.
    KERNEL=$(cat $RTFILE | grep LINUXDIR | sed s/' = '/'='/ | awk '{split($1, A, "=")}{print A[2]}') 2> /dev/null #'
    KERNELDIR=$(cd $KERNEL ; pwd -P )

elif [ -f $RTDIR/bin/rtai-config ] ; then
    echo found an RTAI installation in $RTDIR
    echo "RTNAME = rtai-3.0" >> Makefile.inc
    echo "RTPREFIX = rtai" >> Makefile.inc
    echo "RTAI = $RTAI_VER" >> Makefile.inc
    KERNELDIR=$($RTDIR/bin/rtai-config --linux-dir)
    echo "RTFLAGS = `$RTDIR/bin/rtai-config --module-cflags` -DRTAI=$RTAI_VER" >> Makefile.inc
    CC=$($RTDIR/bin/rtai-config --cc)
    MATHLIB=""

elif [ -f $RTDIR/rtl.mk ] ; then
    RTFILE=$RTDIR/rtl.mk
    echo found an RTLinux installation in $RTDIR
    echo "RTNAME = RT-Linux" >> Makefile.inc
    echo "RTPREFIX = rtl" >> Makefile.inc
    echo "RTLINUX = 1" >> Makefile.inc
# There is probably a better way of doing this without using sed !
    KERNEL=$(cat $RTFILE | grep RTLINUX_DIR | sed s/' = '/'='/ | awk '{split($1, A, "=")}{print A[2]}') 2> /dev/null #'
    KERNELDIR=$(cd $KERNEL ; pwd -P )
fi

echo "KERNELDIR = $KERNELDIR" >> Makefile.inc

if [ "$RTFILE" != "" ] ; then
    cat $RTFILE | grep CFLAGS | sed s/CFLAGS/RTFLAGS/ >> Makefile.inc
fi

echo "RTFLAGS := $MATHINC -I\$(INC_DIR) -I$RTDIR/include -I. \$(RTFLAGS) -DRTAPI" >> Makefile.inc

if [ "$RTFILE" != "" ] ; then
    CC=$(cat $RTFILE | grep CC | sed s/' = '/'='/ | awk '{split($1, A, "=")}{print A[2]}') 2> /dev/null #'
fi

# Set the MATHLIB link options.
if [ "$USE_DIET" != "" ] ; then
    echo "USE_DIET = $USE_DIET" >> Makefile.inc
elif [ "$USE_RTLIBM" != "" ] ; then
    echo "USE_RTLIBM = $USE_RTLIBM" >> Makefile.inc
elif [ "$USE_LIBM" != "" ] ; then
    if [ "$USE_STUBS" != "" ] ; then
      echo "# Using glibc libm with mathstubs." >> Makefile.inc
      echo "# If unresolved symbols are reported when loading kernel modules" >> Makefile.inc
      echo "# please file a bug report." >> Makefile.inc
    fi
    echo "USE_LIBM = $USE_LIBM" >> Makefile.inc
fi
echo "MATHLIB = $MATHLIB" >> Makefile.inc

if [ "$CC" = "" ] ; then
    CC=cc
fi

# RTAI doesn't like gcc 2.96
$CC -v 2> configure.tmp
CCVER=$(cat configure.tmp | grep version)
if [ "$(echo $CCVER | grep 2.96)" ] ; then
    echo "RTAI doesn't like $CCVER"
    echo "Looking for alternate"
    egcs -v 2> configure.tmp
    CCVER=$(cat configure.tmp | grep version)
    if [ "$CCVER" ] ; then
        echo "Found egcs = $CCVER"
        CC=egcs
    else
        echo "Uh oh, couldn't find alternate compiler"
	echo " Please make sure kgcc from the compat-egcs package is installed"
	echo " and the kernel & realtime extensions where compiled with it."
        exit -1
    fi
fi
rm -f configure.tmp

if [ -f $RTDIR/rtl.mk ] ; then
    echo "ULFLAGS = -Wall -g -I\$(INC_DIR) -I\$(INCLUDE) -I. -DULAPI -O2" >> Makefile.inc
else
    echo "ULFLAGS = -Wall -g -I\$(INC_DIR) -I$RTDIR/include -I. -DULAPI -O2" >> Makefile.inc
fi

echo "CC = $CC" >> Makefile.inc
echo >> Makefile.inc
if [ "$RTFILE" != "" ] ; then
    echo "# Additional flags and settings from $RTFILE" >> Makefile.inc
    echo >> Makefile.inc
    cat $RTFILE | grep -v CFLAGS | grep -v CC >> Makefile.inc
    echo >> Makefile.inc
fi

echo "# local flags for GTK includes" >> Makefile.inc
if [ $GTK_VER = "1.2" ] ; then
    echo "GTK_VERSION = 1.2" >> Makefile.inc
    echo "GTK_CFLAGS = `gtk-config --cflags`" >> Makefile.inc
    echo "GTK_LIBS = `gtk-config --libs`" >> Makefile.inc
elif [ $GTK_VER = "2.0" ] || [ $GTK_VER = "2.2" ] ; then
    echo "GTK_VERSION = $GTK_VER" >> Makefile.inc
    echo "GTK_CFLAGS = `pkg-config gtk+-$GTK_VER --cflags`" >> Makefile.inc
    echo "GTK_LIBS = `pkg-config gtk+-$GTK_VER --libs`" >> Makefile.inc
else
    echo "GTK_VERSION = " >> Makefile.inc
    echo "GTK_CFLAGS = " >> Makefile.inc
    echo "GTK_LIBS = " >> Makefile.inc
fi

echo >> Makefile.inc
if [ "$TCLCONFIG" != "" ] && [ "$TKCONFIG" != "" ] ; then
    echo "# include the Tcl/Tk Config.sh files" >> Makefile.inc
    echo "TCL_DBGX = $TCL_DBGX" >> Makefile.inc
    echo "TK_DBGX = $TK_DBGX" >> Makefile.inc
    echo "TCL_CFLAGS = $TCL_INC $TK_INC $TK_XINCLUDES" >> Makefile.inc
    echo "TCL_LIBS = $TK_LIBS $TCL_LIB_SPEC $TK_LIB_SPEC" >> Makefile.inc
fi

echo >> Makefile.inc
echo "# Automatically generated default options." >> Makefile.inc
echo >> Makefile.inc
echo "AR = ar" >> Makefile.inc
echo "ARFLAGS = cr" >> Makefile.inc
echo "CXX = g++" >> Makefile.inc
echo "CXXFLAGS = \$(CFLAGS)" >> Makefile.inc
echo "LD = \$(CC)" >> Makefile.inc
echo "LDFLAGS = " >> Makefile.inc
echo "MAKEFLAGS = $MAKEFLAGS" >> Makefile.inc
echo "RANLIB = ranlib" >> Makefile.inc
echo "RANLIBFLAGS = " >> Makefile.inc
echo >> Makefile.inc

for i in bin include lib rtlib ; do
 if [ ! -d ../$i ] ; then
   mkdir ../$i
 fi
done

# terminate normally
echo
echo " Configure finished - Please check Makefile.inc for warnings."
echo
exit 0

