component lowpass "Low-pass filter";
pin in float in;
pin out float out " out += (in - out) * gain ";
pin in bit load "When TRUE, copy \\fBin\\fR to \\fBout\\fR instead of applying the filter equation.";
param rw float gain;
function _;

notes """
.TP
\\fBDifference Equation:\\fR

out(k) = out(k-1) + gain * (in(k) - out(k-1))

.TP
\\fBZ transform H(z):\\fR
.TP
                              z
H(z) = gain *  ___________________

               ( z - (1 - gain) )


.TP

       Define:   (1 - gain) = e**(-a * T)


.TP
                ( 1 - e**(-a * T) )
H(z) =   ______________________

         ( z - e**(-a * T) )


.PP

H(z) is the zero-order-hold equivalent of a single pole low pass filter H(s)
with its output sampled at the interval T.

.TP
\\fBLaPlace Transform H(s):\\fR

.TP

                      a
H(s) =  _______________

          ( s  + a )

.TP
\\fBImpulse Response h(t):\\fR

h(t) = e**(-a * t)

.TP
\\fBExamples:\\fR

     T = 0.001 seconds (typical servo thread period)
     a = (2*pi*100)    (\\fB100Hz\\fR bandwith single pole)
  gain = \\fB0.466\\fR

     T = 0.001 seconds (typical servo thread period)
     a = (2*pi*50)     ( \\fB50Hz\\fR bandwith single pole)
  gain = \\fB0.2696\\fR

     T = 0.001 seconds (typical servo thread period)
     a = (2*pi*10)     ( \\fB10Hz\\fR bandwith single pole)
  gain = \\fB0.060\\fR
""";

license "GPL";
notes "The effect of a specific \\fBgain\\fR value is dependent on the period of the function that \\fBlowpass.\\fIN\\fR is added to";
;;
FUNCTION(_) {
    if(load)
	out = in;
    else
	out += (in - out) * gain;
}
