
debacle: a complete and ludicrous failure; a rout, as of an army;
    a great disaster; a fiasco


The Mesa Anything I/O boards have FPGAs that need to be programmed
with firmware (such as HostMot2) before they can do anything useful.
The firmware is stored on the host computer.  The host computer sends
the firmware to the Anything I/O board at startup, using a communication
mechanism very similar to the mechanism it uses to communicate with the
firmware during normal operation later.

Each board has several possible firmwares it can run, each providing
different combinations of quadrature counters, PWM generators, step/dir
generators, etc.  The user must decide which firmware to send to which
board.

When emc2 is installed as a package on the computer, the firmware files
are installed in some well-known location in the the public part of the
computer's filesystem.  When emc2 is compiled from source and run-in-place
(RIP), the firmare files are located in the user's sandbox, usually in
a random user-chosen directory.  The user may have several different
sandboxes, each using RIP.


There are two reasonable-seeming ways to send the firmware to the boards:
via the normal kernel driver, or via a separate userspace utility.


1.  kernel driver loads firmware

    The 2.6 kernel has a mechanism that allows a device driver to
    request a firmware file; udev fetches the file and delivers it to
    the driver.  The mechanism is documented in the linux kernel source,
    in Documentation/firmware_class/README.  It's widely used and well
    supported.

    The default solution would of course be to use this existing
    infrastructure to accomplish firmware loading.  The driver would
    accept a modparam string where the user specified the firmware to
    load on each board.  udev would deliver the requested firmware and
    the driver would program the FPGA.

    There are several reasons this solution would be desirable:

        Having all the code that talks to the boards in one place (the
        device driver) is natural and simple.

        The kernel has full, unfettered access to the boards, whereas
        access to PCI and EPP devices from userspace is awkward.

        This solution avoids issues with userspace library availability,
        library version skew, etc, though at the expense of kernel
        version skew.  The kernel firmware interface has been stable
        for a long time now, so this seems like a good trade.


    Unfortunately the kernel firmware interface has shortcomings that
    make it awkward to use with emc2.

    The standard kernel firmware loading userspace helper searches for
    firmware in a small set of standard system directories (/lib/firmware
    & friends).  This would work great when emc2 is installed by .deb
    package, but wouldnt work out-of-the-box with RIP: the firmware
    helper doesnt know to look in the user's sandbox.

    RIP with the standard userspace helper would thus require that the
    user symlink their sandbox's firmware directory into /lib/firmware.
    And that they remember to move the symlink when they switch to a
    different RIP sandbox.  And remember to remove the symlink before
    installing a .deb that installs its firmware there.  This would
    violate the system's integrity by placing files in the public
    part of the filesystem without going through the package manager.
    In other words, it would be a mess.

    udev is flexible, and it's possible to provide alternate
    firmware helper scripts to handle loading firmwares from
    other places.  Some documentation on how to do this is here:
    <http://reactivated.net/writing_udev_rules.html>.  This would mean
    installing a custom udev rule in /etc/udev/rules.d (emc2 already
    does this, to tweak the permissions of rtai fifos) and installing a
    custom firmware helper.

    The driver's firmware modparam would specify the absolute path to
    the firmware file to load on each board, and the custom userspace
    firmware helper would fetch the file and deliver it to the driver.

    This would work well, except...  The kernel imposes a 30-character
    limit on the filename of the requested firmware (FIRMWARE_NAME_MAX
    in include/linux/firmware.h).  Firmwares in sandboxes tend to be
    in deeply nested subdirectories, with paths much longer than this.
    So absolute firmware paths are basically infeasible.  Custom udev
    firmware helpers can't help with this, it's a kernel limitation.


    Thus the only way to do in-kernel firmware loading (as of 2.6.24)
    is to install emc2 via the .deb, or to symlink the user's active
    RIP sandbox into /lib/firmware.  This is unseemly to your humble
    correspondent.


2.  userspace utility (bfload) loads firmware

    This has the advantage that userspace has full access to the
    filesystem, so accessing firmware files in arbitrary sandbox
    directories is easy.

    However, it also has several drawbacks:

        It's clumsy to have two pieces of code driving the boards.
        I/O conflicts must be detected and avoided, and this is fraught
        with race conditions.  I think this is not a huge problem in
        practice, but it smells bad.

        EPP I/O must be done "manually" with ins and outs, since the
        standard parport driver is unsuitable for use with RTAI.

        Properly initializing the PCI boards requires access to the PCI
        Config space and the board's normal BARs.  Userspace PCI access
        is via one of several libraries:

            upci (the current emc2 PCI access library) supports IO and
            Memory BAR access but lacks PCI Config space access

            libpci supports Config space access but lacks BAR access

            libpciaccess supports Config space and Memory BARs, but not
            IO BARs


    The cleanest way to handle the PCI access issue would be to have one
    PCI library that provided all the access methods needed.  No such
    library currently exists to my knowledge, and certainly none is
    available on all our supported platforms.

    The PCI access issue can be fixed a couple of ways:

        use upci and libpci together (gross)

        merge upci into libpci or libpciaccess (clean) and fork the
        result into our tree to support old distros without the new
        upstream library (gross)

        shell out to setpci where needed


    The current Config-space access requirements are modest, so for
    now I've chosen to shell out to setpci.  This would quickly become
    untenable if the access requirement grew more demanding, but it
    works ok for now.


