INCLUDES += rtapi

../include/%.h: ./rtapi/%.h
	cp $^ $@
../include/%.hh: ./rtapi/%.hh
	cp $^ $@

ifeq ($(BUILD_SYS),user-dso)
##########################################
# userland thread systems defaults

# Sources needed to be linked into ../bin/rtapi_app
# (Can some of these be trimmed out and moved into ULAPISRCS?)
RTAPI_APP_SRCS := \
	rtapi/rtapi_common.c \
	rtapi/rtapi_msg.c \
	rtapi/rtapi_shmem.c \
	rtapi/rtapi_time.c \
	rtapi/rtapi_pci.c \
	rtapi/rtapi_task.c \
	rtapi/$(THREADS).c

# The full list of RTAPI sources.
# These will be compiled twice:
# - once with -DRTAPI for the ../rtlib/* modules
# - once with -DULAPI for ../lib/liblinuxcnchal.so
ULAPISRCS := $(RTAPI_APP_SRCS) \
	rtapi/rtapi_io.c

# HACK:  This should be in RTAPI_APP_SRCS, but those need to be
# compiled with -DRTAPI.  This could be also, but the Makefile doesn't
# know how to compile C++ RTAPI sources, so for now it's hacked in
# here.
USERSRCS +=  rtapi/sim_rtapi_app.cc

# Compile and link flags for RT
#RT_CFLAGS :=  -lrt  # this is wrong, right?
RT_CFLAGS := 
RT_LDFLAGS := 

# add rtapi_app to the build
TARGETS += ../bin/rtapi_app

else
##########################################
# defaults for kernel thread styles

# there's no rtapi_app  
RTAPI_APP_SRCS := 

RT_CFLAGS := 

endif

# flags for linking ../lib/liblinuxcnchal.so
ULAPI_LDFLAGS := 

# compile any userland sources with -DULAPI
USERSRCS += $(RTAPI_APP_SRCS)

# add .o files to be turned into modules
rtapi-objs := $(patsubst %.c, %.o, $(ULAPISRCS))


##################################################################
#  ---------------- kernel thread styles ----------------
##################################################################
ifeq ($(THREADS),rtai)
################################################
# rtai settings

ULAPISRCS := rtapi/rtai_ulapi.c
endif

ifeq ($(THREADS),xenomai-kernel)
################################################
# xenomai-kernel settings

ULAPISRCS := rtapi/xenomai_ulapi.c

XENO_CONFIG ?= xeno-config --skin=native
XENO_CFLAGS := $(shell $(XENO_CONFIG) --cflags )
ULAPI_LDFLAGS += $(shell $(XENO_CONFIG) --ldflags )

$(call TOOBJSDEPS, $(ULAPISRCS)): EXTRAFLAGS += -fPIC $(XENO_CFLAGS)
endif


##################################################################
#  ---------------- userland thread styles ----------------
##################################################################

ifeq ($(THREADS),posix)
################################################
# simulator settings

PTH_CONFIG ?= pth-config
RTAPI_CFLAGS := $(shell $(PTH_CONFIG) --cflags 2>/dev/null)
RTAPI_LINK := $(shell $(PTH_CONFIG) --ldflags --libs 2>/dev/null)

$(call TOOBJSDEPS, $(RTAPI_APP_SRCS)): EXTRAFLAGS += $(RTAPI_CFLAGS)
endif


ifeq ($(THREADS),xenomai-user)
################################################
# xenomai-user settings

XENO_CONFIG ?= xeno-config --skin=native

XENO_CFLAGS := $(shell $(XENO_CONFIG) --cflags )
RT_CFLAGS +=  $(XENO_CFLAGS)
$(call TOOBJSDEPS, $(ULAPISRCS) rtapi/sim_rtapi_app.c): \
	EXTRAFLAGS +=  $(XENO_CFLAGS)

XENO_LDFLAGS := $(shell $(XENO_CONFIG) --ldflags )
RT_LDFLAGS += $(XENO_LDFLAGS)
ULAPI_LDFLAGS += $(XENO_LDFLAGS)
endif


ifeq ($(THREADS),rt-preempt-user)
################################################
# rt-preempt-user settings

# Compile flags for objects/rtrtapi/*.o
#RT_CFLAGS +=  -lpthread  # this is wrong, right?
RT_LDFLAGS += -lpthread -lrt
endif


ifeq ($(BUILD_SYS),user-dso)
################################################
# build rtapi_app for userland thread systems

# HACK:  prepending 'rt' ('rtrtapi/rtapi_foo.o') so that RTAPI_APP_SRCS
# are compiled with -DRTAPI.  The sim_rtapi_app object file must be
# specified separately for the reason described above.
../bin/rtapi_app: $(call TOOBJS, $(patsubst %,rt%, $(RTAPI_APP_SRCS))) \
			objects/rtapi/sim_rtapi_app.o
	$(ECHO) Linking $(notdir $@)
	$(Q)$(CXX) -rdynamic $(LDFLAGS) -o $@ $^ $(RT_LDFLAGS) -ldl
TARGETS += ../bin/rtapi_app
endif
