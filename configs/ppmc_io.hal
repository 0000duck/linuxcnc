# HAL config file for ServoToGo STG ISA board
#
# install driver (only needed if stg_motion.hal doesn't get run)
#loadrt hal_stg

# add I/O to servo thread so they will be evaluated
# every servo period
addf ppmc.0.read servo-thread 1
addf ppmc.0.write servo-thread -1

#uncomment following line if ADC's are needed (for example spindle-tach feedback)
#addf stg.0.read-adcs servo-thread 1

#
# Connect motion controller I/Os
#

# connect limit/home switch outputs to motion controller
newsig Xminlim bit
newsig Xmaxlim  bit
newsig Xhome bit
linksp Xminlim <= ppmc.0.din.01.in
linksp Xminlim => axis.0.neg-lim-sw-in
linksp Xmaxlim <= ppmc.0.din.02.in
linksp Xmaxlim => axis.0.pos-lim-sw-in
linksp Xhome <= ppmc.0.din.00.in
linksp Xhome => axis.0.home-sw-in

newsig Yminlim bit
newsig Ymaxlim  bit
newsig Yhome bit
linksp Yminlim <= ppmc.0.din.05.in
linksp Yminlim => axis.1.neg-lim-sw-in
linksp Ymaxlim <= ppmc.0.din.06.in
linksp Ymaxlim => axis.1.pos-lim-sw-in
linksp Yhome <= ppmc.0.din.04.in
linksp Yhome => axis.1.home-sw-in

newsig Zminlim bit
newsig Zmaxlim  bit
newsig Zhome bit
linksp Zminlim <= ppmc.0.din.09.in
linksp Zminlim => axis.2.neg-lim-sw-in
linksp Zmaxlim <= ppmc.0.din.10.in
linksp Zmaxlim => axis.2.pos-lim-sw-in
linksp Zhome <= ppmc.0.din.08.in
linksp Zhome => axis.2.home-sw-in

# connect index pulses to motion controller
# do these when index pulsing is figured out
newsig Xindex bit
newsig Yindex  bit
newsig Zindex bit
linksp Xindex <= ppmc.0.encoder.00.index
linksp Xindex => axis.0.index-pulse-in
linksp Yindex <= ppmc.0.encoder.01.index
linksp Yindex => axis.1.index-pulse-in
linksp Zindex <= ppmc.0.encoder.02.index
linksp Zindex => axis.2.index-pulse-in

#
# Connect I/O controller I/Os
#

# connect e-stop write/sense to I/O controller
newsig EstopSense bit
newsig EstopWrite bit
linksp EstopSense <= ppmc.0.din.15.in
linksp EstopSense => iocontrol.0.emc-enable-in
linksp EstopWrite <= ppmc.0.dout.07.out
linksp EstopWrite => iocontrol.0.user-enable-out
#estop may need to be inverted

# connect spindle fwd/rev to I/O controller
newsig SpindleFwd bit
newsig SpindleRev bit
linksp SpindleFwd <= ppmc.0.dout.00.out
linksp SpindleFwd => iocontrol.0.spindle-forward
linksp SpindleRev <= ppmc.0.dout.01.out
linksp SpindleRev => iocontrol.0.spindle-reverse

# connect spindle speed up/down to I/O controller
newsig SpindleUp bit
newsig SpindleDown bit
linksp SpindleUp <= ppmc.0.dout.06.out
linksp SpindleUp => iocontrol.0.spindle-incr-speed
linksp SpindleDown <= ppmc.0.dout.05.out
linksp SpindleDown => iocontrol.0.spindle-decr-speed

# connect spindle brake to I/O controller
newsig SpindleBrakeOn bit
linksp SpindleBrakeOn <= ppmc.0.dout.02.out
linksp SpindleBrakeOn => iocontrol.0.spindle-brake

# connect mist/flood coolant to I/O controller
newsig MistOn bit
newsig FloodOn bit
linksp MistOn <= ppmc.0.dout.03.out
linksp MistOn => iocontrol.0.coolant-mist
linksp FloodOn <= ppmc.0.dout.04.out
linksp FloodOn => iocontrol.0.coolant-flood
