
# this loads the PRU binary 'pruexample.bin' into PRU 0
# and leaves the PRU disabled:
# see the Makefile how pruexample.bin is created

loadrt hal_pru prucode="pruexample.bin" disabled=1 pru=0

# this is the PRU debugger. It connects to PRU shared memory
# can inspect registers and PRU status (processor status, program counter)
# exported pins:
#
# hal_prudebug.reset       # u32,in  select PRU (0,1)
# hal_prudebug.continuous  # bit,in, sample PRU every thread period
# hal_prudebug.snap        # bit,in, sample PRU on positive edge
# hal_prudebug.halt        # bit,in, stop the PRU at current instruction
# hal_prudebug.step        # bit,in, set PRU stepping mode
# hal_prudebug.continue    # bit,in, reenable  PRU after halt; will step 1 instruction if stepping
# hal_prudebug.reset       # bit,in  reset PRU
#
# hal_prudebug.CONTROL     # u32,out PRU status register
# hal_prudebug.PC          # u32,out PRU program counter
# hal_prudebug.R0-R31      # u32,out PRU register values

# unrelated to debugging, see EXPLORE_COUNTERS #define in ha√∂_prudebug.c
# hal_prudebug.IEP_COUNT     # u32,out 200Mhz TSC counter in IEP (Industrial Ethernet) module

loadrt hal_prudebug

loadrt threads period1=20000000 # 20msec
addf hal_pru.update thread1
addf hal_prudebug.update thread1
start
#

# sample PRU status every thread period
setp hal_prudebug.continuous 1
#show pin hal_prudebug.ECAP_COUNT

# show last sample of program counter and registers
show pin hal_prudebug.PC
show pin hal_prudebug.R
