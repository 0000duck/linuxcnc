; EMC controller parameters for generic controller. Make these what you need
; for your system.

; General section -------------------------------------------------------------
[EMC]

; Version of this INI file
VERSION =               $Revision$

; Name of machine, for use with display, etc.
MACHINE =               EMC-HAL

; Name of NML file to use, default is emc.nml
NML_FILE =              configs/emc.nml

; Debug level, 0 means no messages. See emc/src/emcnml/emcglb.h for others
;DEBUG =                 0x00000003
; DEBUG =               0x00000007
DEBUG =               0x7FFFFFFF

; Sections for display options ------------------------------------------------
[DISPLAY]

; Name of display program, e.g., xemc
; DISPLAY =             xemc
DISPLAY =             tkemc
; DISPLAY =             yemc
; DISPLAY =             keystick
; DISPLAY =             emcpanel
; DISPLAY =               dummy
; DISPLAY =               usrmot
; DISPLAY = emcsh

; Cycle time, in seconds, that display will sleep between polls
CYCLE_TIME =            0.200

; Path to help file
HELP_FILE =             doc/help.txt

; Initial display setting for position, RELATIVE or MACHINE
POSITION_OFFSET =       RELATIVE

; Initial display setting for position, COMMANDED or ACTUAL
POSITION_FEEDBACK =     ACTUAL

; Highest value that will be allowed for feed override, 1.0 = 100%
MAX_FEED_OVERRIDE =     1.2

; Prefix to be used
PROGRAM_PREFIX =        programs/

; Introductory graphic
INTRO_GRAPHIC = emc.gif
INTRO_TIME = 5

; Task controller section -----------------------------------------------------
[TASK]

; Name of task controller program, e.g., bridgeporttask
TASK =                  milltask
; TASK =                minimilltask

; Cycle time, in seconds, that task controller will sleep between polls
CYCLE_TIME =            0.010

; Part program interpreter section --------------------------------------------
[RS274NGC]

; File containing interpreter variables
PARAMETER_FILE =        configs/emc.var

; Motion control section ------------------------------------------------------
[EMCMOT]

EMCMOT =              motmod.o

; Key for real OS shared memory, e.g., for simulated motion
SHMEM_KEY =             101

; Base address for physical shared memory, e.g., for real-time motion.
; Note that if you change this, you may need to change OS parameters, e.g.,
; /etc/lilo.conf
; SHMEM_BASE_ADDRESS =    0x1F00000
; SHMEM_BASE_ADDRESS =  0x3F00000

; Timeout for comm to emcmot, in seconds
COMM_TIMEOUT =          1.0

; Interval between tries to emcmot, in seconds
COMM_WAIT =             0.010

; Base task period, in seconds - this is the fastest thread in the machine
BASE_PERIOD =                0.000050
; Servo task period, in seconds - will be rounded to an integer multiple
;   of BASE_PERIOD
SERVO_PERIOD =               0.001000
; Trajectory Planner task period, in seconds - will be rounded to an
;   integer multiple of SERVO_PERIOD
TRAJ_PERIOD =                0.010000

; Hardware Abstraction Layer section --------------------------------------------------
[HAL]

; The run script first loads the RTMOD modules, then
; loads the USRMOD modules, then uses halcmd to execute
; any HALCFG files, and finally executes any individual
; HALCMD commands.

; maximum number of RT modules to load
RTMODMAX =                   10
; list of realtime modules to load, with their config strings
; modules are loaded in order, RTMOD1 to RTMOD<RTMODMAX>
RTMOD2 =                     stepgen
RTMODCFG2 =                  cfg="0 0 0"
; loading the parport module - make sure the port is correct below
RTMOD3 =                     hal_parport
RTMODCFG3 =                  cfg="0x0378"
; nine window comparators to simulate limit and home switches
; this goes with "simulated_limits.hal"
RTMOD4 =                     blocks
RTMODCFG4 =                  wcomp=9
; loading the RT portion of halscope, even if I don't need it
RTMOD5 =                     scope_rt

; maximum number of non-realtime modules to load
USRMODMAX =                  10
; list of non-realtime modules to load, with their command line args
; modules are loaded in order, USRMOD1 to USRMOD<USRMODMAX>
USRMOD1 =                    halmeter
USRMODARG1 =                 pin axis.0.motor-pos-fb
USRMOD2 =                    halmeter
USRMODARG2 =                 pin axis.1.motor-pos-fb
USRMOD3 =                    halmeter
USRMODARG3 =                 pin axis.2.motor-pos-fb
;USRMOD4 =                    halmeter
;USRMODARG4 =                 param axis.1.joint-pos-fb

; maximum number of HAL config files
HALCFGMAX =                  10
; list of hal config files to run through halcmd
; files are executed in order, HALCFG1 to HALCFG<HALCFGMAX>
HALCFG1 =                    core_stepper.hal
# HALCFG2 =                    xylotex_pinout.hal
HALCFG2 =                    standard_pinout.hal
# HALCFG3 =                    simulated_limits.hal

; maximum number of HALCMD commands
HALCMDMAX =                  10
; list of halcmd commands to execute
; commands are executed in order, HALCMD1 to HALCMD<HALCMDMAX>
;HALCMD1 =                    save neta

; Trajectory planner section --------------------------------------------------
[TRAJ]

AXES =                  3
; COORDINATES =         X Y Z R P W
COORDINATES =           X Y Z
HOME =                  0 0 0
LINEAR_UNITS =          0.03937007874016
ANGULAR_UNITS =         1.0
CYCLE_TIME =            0.010
DEFAULT_VELOCITY =      0.0167
MAX_VELOCITY =          1.2
DEFAULT_ACCELERATION =  20.0
MAX_ACCELERATION =      20.0
PROBE_INDEX =           0
PROBE_POLARITY =        1

; Axes sections ---------------------------------------------------------------

; First axis
[AXIS_0]

TYPE =                          LINEAR
UNITS =                         0.03937007874016
HOME =                          0.000
MAX_VELOCITY =                  1.2
MAX_ACCELERATION =              20.0
P = 0.000
I = 0.000
D = 0.000
FF0 = 0.000
FF1 = 0.000
FF2 = 0.000
BACKLASH = 0.000
BIAS = 0.000
MAX_ERROR = 0.000
DEADBAND = 0.000
CYCLE_TIME =                    0.001000
INPUT_SCALE =                   1000    0
OUTPUT_SCALE = 1.000 0.000
MIN_LIMIT =                     -10.0
MAX_LIMIT =                     10.0
MIN_OUTPUT =                    -10
MAX_OUTPUT =                    10
FERROR = 1.000
MIN_FERROR = 0.002
HOMING_VEL =                    0.0
SETUP_TIME = 			1
HOLD_TIME =			2
; HOME_OFFSET =                   9.5
HOME_OFFSET =                   0.0
ENABLE_POLARITY =               0
MIN_LIMIT_SWITCH_POLARITY =     0
MAX_LIMIT_SWITCH_POLARITY =     0
HOME_SWITCH_POLARITY =          1
HOMING_POLARITY =               1
JOGGING_POLARITY =              1
FAULT_POLARITY =                1
; Parameters for Inland Motor BMHS-0701 X 20
TORQUE_UNITS =                  OZ_IN
ARMATURE_RESISTANCE =           1.10
ARMATURE_INDUCTANCE =           0.0120
BACK_EMF_CONSTANT =             0.0254
ROTOR_INERTIA =                 0.0104
DAMPING_FRICTION_COEFFICIENT =  0.083
SHAFT_OFFSET =                  0
REVS_PER_UNIT =                 10
; Parameters for generic amplifier
AMPLIFIER_GAIN =                1
MAX_OUTPUT_CURRENT =            10
LOAD_RESISTANCE =               1
; parameters for generic encoder
COUNTS_PER_REV =                4096

; Second axis
[AXIS_1]

TYPE =                          LINEAR
UNITS =                         0.03937007874016
HOME =                          0.000
MAX_VELOCITY =                  1.2
MAX_ACCELERATION =              20.0
P = 1000.000
I = 0.000
D = 0.030
FF0 = 0.000
FF1 = 0.077
FF2 = 0.000
BACKLASH = 0.000
BIAS = 0.000
MAX_ERROR = 0.000
DEADBAND = 0.000
CYCLE_TIME =                    0.001000
INPUT_SCALE =                   1000    0
OUTPUT_SCALE = 1.000 0.000
MIN_LIMIT =                     -10.0
MAX_LIMIT =                     10.0
MIN_OUTPUT =                    -10
MAX_OUTPUT =                    10
FERROR = 0.020
MIN_FERROR = 0.001
HOMING_VEL =                    0.0
SETUP_TIME = 			1
HOLD_TIME =			2
; HOME_OFFSET =                   9.5
HOME_OFFSET =                   0.0
ENABLE_POLARITY =               0
MIN_LIMIT_SWITCH_POLARITY =     0
MAX_LIMIT_SWITCH_POLARITY =     0
HOME_SWITCH_POLARITY =          1
HOMING_POLARITY =               1
JOGGING_POLARITY =              1
FAULT_POLARITY =                1
; Parameters for Inland Motor BMHS-0701 X 20
TORQUE_UNITS =                  OZ_IN
ARMATURE_RESISTANCE =           1.10
ARMATURE_INDUCTANCE =           0.0120
BACK_EMF_CONSTANT =             0.0254
ROTOR_INERTIA =                 0.0104
DAMPING_FRICTION_COEFFICIENT =  0.083
SHAFT_OFFSET =                  0
REVS_PER_UNIT =                 10
; Parameters for generic amplifier
AMPLIFIER_GAIN =                1
MAX_OUTPUT_CURRENT =            10
LOAD_RESISTANCE =               1
; parameters for generic encoder
COUNTS_PER_REV =                4096

; Third axis
[AXIS_2]

TYPE =                          LINEAR
UNITS =                         0.03937007874016
HOME =                          0.0
MAX_VELOCITY =                  1.2
MAX_ACCELERATION =              20.0
P = 1000.000
I = 0.000
D = 0.030
FF0 = 0.000
FF1 = 0.077
FF2 = 0.000
BACKLASH = 0.000
BIAS = 0.000
MAX_ERROR = 0.000
DEADBAND = 0.000
CYCLE_TIME =                    0.001000
INPUT_SCALE =                   1000    0
OUTPUT_SCALE = 1.000 0.000
MIN_LIMIT =                     -2.0
MAX_LIMIT =                     4.0
MIN_OUTPUT =                    -10
MAX_OUTPUT =                    10
FERROR = 0.020
MIN_FERROR = 0.001
HOMING_VEL =                    0.0
SETUP_TIME = 			1
HOLD_TIME =			2
; HOME_OFFSET =                   3.9
HOME_OFFSET =                   0.0
ENABLE_POLARITY =               0
MIN_LIMIT_SWITCH_POLARITY =     0
MAX_LIMIT_SWITCH_POLARITY =     0
HOME_SWITCH_POLARITY =          1
HOMING_POLARITY =               1
JOGGING_POLARITY =              1
FAULT_POLARITY =                1
; Parameters for Inland Motor BMHS-0701 X 20
TORQUE_UNITS =                  OZ_IN
ARMATURE_RESISTANCE =           1.10
ARMATURE_INDUCTANCE =           0.0120
BACK_EMF_CONSTANT =             0.0254
ROTOR_INERTIA =                 0.0104
DAMPING_FRICTION_COEFFICIENT =  0.083
SHAFT_OFFSET =                  0
REVS_PER_UNIT =                 10
; Parameters for generic amplifier
AMPLIFIER_GAIN =                1
MAX_OUTPUT_CURRENT =            10
LOAD_RESISTANCE =               1
; parameters for generic encoder
COUNTS_PER_REV =                4096

; section for main IO controller parameters -----------------------------------
[EMCIO]

; Name of IO controller program, e.g., bridgeportio
; EMCIO =               bridgeportio
; EMCIO =               minimillio
EMCIO =               simio

; cycle time, in seconds
CYCLE_TIME =    0.100

; tool table file
TOOL_TABLE =    emc.tbl

; address for parallel port used for auxiliary IO
IO_BASE_ADDRESS =    0x278

; wait times in seconds for spindle brake, release
SPINDLE_OFF_WAIT          =     1.0
SPINDLE_ON_WAIT           =     1.5

; external digital inputs, outputs are always 0 for 0V, 1 for 5/24V

; digital in bits

ESTOP_SENSE_INDEX         =     1
LUBE_SENSE_INDEX          =     2

; digital in polarity, 0 is inverted, 1 is normal
; controller compares with polarity, equal means on, not equal means off

ESTOP_SENSE_POLARITY      =     0
LUBE_SENSE_POLARITY       =     1

; digital out bits

SPINDLE_FORWARD_INDEX     =     1
SPINDLE_REVERSE_INDEX     =     0
MIST_COOLANT_INDEX        =     6
FLOOD_COOLANT_INDEX       =     7
SPINDLE_DECREASE_INDEX    =     8
SPINDLE_INCREASE_INDEX    =     9
ESTOP_WRITE_INDEX         =     10
SPINDLE_BRAKE_INDEX       =     11
LUBE_WRITE_INDEX          =     5

; analog out bits

SPINDLE_ON_INDEX          =     3
MIN_VOLTS_PER_RPM         =     -0.001
MAX_VOLTS_PER_RPM         =     0.001042

; digital out polarity, 0 is inverted, 1 is normal
; controller writes the polarity to turn on, opposite of polarity to turn off

SPINDLE_FORWARD_POLARITY  =     0
SPINDLE_REVERSE_POLARITY  =     0
MIST_COOLANT_POLARITY     =     0
FLOOD_COOLANT_POLARITY    =     0
SPINDLE_DECREASE_POLARITY =     1
SPINDLE_INCREASE_POLARITY =     1
ESTOP_WRITE_POLARITY      =     1
SPINDLE_BRAKE_POLARITY    =     0
SPINDLE_ENABLE_POLARITY   =     1
SPINDLE_BRAKE_INDEX       =     11
LUBE_WRITE_POLARITY       =     1


; section for external NML server parameters ----------------------------------
[EMCSERVER]

; Name of NML server, e.g., emcsvr; if not found then none will run
; EMCSERVER =           emcsvr

; section for emc stripchart  parameters ----------------------------------
[EMCSTRIP]

; Name of strip chart display program e.g.  emcstripchart; if not found then none will run
; EMCSTRIP =            emcstripchart

; OPTIONS for emcstripchart ussually -f something.conf; This file says which
; variables to plot, colors etc. -u  changes the update rate.
OPTIONS = -f emcstrip.conf.ferror

;test


