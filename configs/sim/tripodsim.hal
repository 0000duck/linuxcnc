# core HAL config file for simulation

# first load all the RT modules that will be needed
# kinematics
loadrt tripodkins
setp tripodkins.Bx 10
setp tripodkins.Cx 5
setp tripodkins.Cy 7.071

# motion controller, get name and thread periods from ini file
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD traj_period_nsec=[EMCMOT]TRAJ_PERIOD key=[EMCMOT]SHMEM_KEY
# 6 differentiators (for velocity and accel sigs)
loadrt ddt count=6
loadrt hypot count=2

# add motion controller functions to servo thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
# link the differentiator functions into the code
addf ddt.0 servo-thread
addf ddt.1 servo-thread
addf ddt.2 servo-thread
addf ddt.3 servo-thread
addf ddt.4 servo-thread
addf ddt.5 servo-thread
addf hypot.0 servo-thread
addf hypot.1 servo-thread

# create HAL signals for position commands from motion module
newsig Xpos float
linksp Xpos <= axis.0.motor-pos-cmd
newsig Ypos float
linksp Ypos <= axis.1.motor-pos-cmd
newsig Zpos float
linksp Zpos <= axis.2.motor-pos-cmd

# loop position commands back to motion module feedback
linksp Xpos => axis.0.motor-pos-fb
linksp Ypos => axis.1.motor-pos-fb
linksp Zpos => axis.2.motor-pos-fb

# send the position commands thru differentiators to
# generate velocity and accel signals
# define the signals, and hook them up
newsig Xvel float
newsig Xacc float
linksp Xpos => ddt.0.in
linkps ddt.0.out => Xvel
linksp Xvel => ddt.1.in
linkps ddt.1.out => Xacc
newsig Yvel float
newsig Yacc float
linksp Ypos => ddt.2.in
linkps ddt.2.out => Yvel
linksp Yvel => ddt.3.in
linkps ddt.3.out => Yacc
newsig Zvel float
newsig Zacc float
linksp Zpos => ddt.4.in
linkps ddt.4.out => Zvel
linksp Zvel => ddt.5.in
linkps ddt.5.out => Zacc

newsig XYvel float
linksp Xvel => hypot.0.in0
linksp Yvel => hypot.0.in1
linksp XYvel <= hypot.0.out
newsig XYZvel float
linksp Zvel => hypot.1.in0
linksp XYvel => hypot.1.in1
linksp XYZvel <= hypot.1.out

# estop loopback
linkpp iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

# create signals for tool loading loopback
linkpp iocontrol.0.tool-prepare iocontrol.0.tool-prepared
linkpp iocontrol.0.tool-change iocontrol.0.tool-changed

# amp control
newsig xena bit
linksp xena axis.0.amp-enable-out
newsig yena bit
linksp yena axis.1.amp-enable-out
newsig zena bit
linksp zena axis.2.amp-enable-out

newsig xflt bit
linksp xflt axis.0.amp-fault-in
newsig yflt bit
linksp yflt axis.1.amp-fault-in
newsig zflt bit
linksp zflt axis.2.amp-fault-in
