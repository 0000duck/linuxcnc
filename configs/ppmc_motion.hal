# HAL config file for Pico Systems USC board
#
# install driver
loadrt hal_ppmc

# add functions to servo thread so they will be evaluated
# every servo period
addf ppmc.0.read servo-thread 1
addf ppmc.0.write servo-thread -1

# set sane pulse timing - these are basically Gecko numbers
# both pulse width and space are aset to 3.5 uS, to prevent
# problems if the outputs are inverted externally
setp ppmc.0.stepgen.00-03.pulse-width 35
setp ppmc.0.stepgen.00-03.pulse-space-min 35
setp ppmc.0.stepgen.00-03.setup-time 10

# connect position feedback signals to encoders
linksp Xpos-fb <= ppmc.0.encoder.00.position
linksp Ypos-fb <= ppmc.0.encoder.01.position
linksp Zpos-fb <= ppmc.0.encoder.02.position

# get feedback scaling from ini file
setp ppmc.0.encoder.00.scale [AXIS_0]INPUT_SCALE 
setp ppmc.0.encoder.01.scale [AXIS_1]INPUT_SCALE 
setp ppmc.0.encoder.02.scale [AXIS_2]INPUT_SCALE 

# connect PID output signals to step generators
linksp Xoutput => ppmc.0.stepgen.00.velocity
linksp Youtput => ppmc.0.stepgen.01.velocity
linksp Zoutput => ppmc.0.stepgen.02.velocity

# connect axis enables to step generators
linksp Xenable => ppmc.0.stepgen.00.enable
linksp Yenable => ppmc.0.stepgen.01.enable
linksp Zenable => ppmc.0.stepgen.02.enable

# set output scaling from ini file 
# note that these are using INPUT_SCALE - this is because the
# input and output scales should (normally) be the same for a USC
# and emc2 always rewrites OUTPUT_SCALE to 1
setp ppmc.0.stepgen.00.scale [AXIS_0]INPUT_SCALE
setp ppmc.0.stepgen.01.scale [AXIS_1]INPUT_SCALE
setp ppmc.0.stepgen.02.scale [AXIS_2]INPUT_SCALE

# set preliminary PID gains
setp pid.0.FF1 1
setp pid.1.FF1 1
setp pid.2.FF1 1

