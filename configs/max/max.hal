# core HAL config file for steppers

loadrt stepgen step_type=0,0,0
loadrt encoder num_chan=1
loadrt sim_encoder num_chan=1

linkpp sim-encoder.0.phase-A => encoder.0.phase-A
linkpp sim-encoder.0.phase-B => encoder.0.phase-B
linkpp sim-encoder.0.phase-Z => encoder.0.phase-Z

# encoder is 400 ppr so vel=1 (rpm) gives 400Hz
newsig spindle-speed float
linksp spindle-speed => sim-encoder.0.speed
sets spindle-speed 1.0 # rps

setp encoder.0.position-scale 0.9 # 400 pps => degrees
#newsig index-enable bit
#linksp index-enable => encoder.0.index-enable
#sets index-enable 1

addf stepgen.update-freq servo-thread -1
addf sim-encoder.update-speed servo-thread -1

addf stepgen.make-pulses base-thread -1
addf sim-encoder.make-pulses base-thread -1

addf stepgen.capture-position servo-thread 1
addf encoder.capture-position servo-thread 1
addf encoder.update-counters base-thread -1

# new hal change
addf motion-command-handler servo-thread
addf motion-controller servo-thread

# connect position commands from motion module to step generator
newsig Xpos-cmd float
linksp Xpos-cmd <= axis.0.motor-pos-cmd
linksp Xpos-cmd => stepgen.0.position-cmd
newsig Ypos-cmd float
linksp Ypos-cmd <= axis.1.motor-pos-cmd
linksp Ypos-cmd => stepgen.1.position-cmd
newsig Zpos-cmd float
linksp Zpos-cmd <= axis.2.motor-pos-cmd
linksp Zpos-cmd => stepgen.2.position-cmd

# connect position feedback from step generators
# to motion module
newsig Xpos-fb float
linksp Xpos-fb <= stepgen.0.position-fb
linksp Xpos-fb => axis.0.motor-pos-fb
newsig Ypos-fb float
linksp Ypos-fb <= stepgen.1.position-fb
linksp Ypos-fb => axis.1.motor-pos-fb
newsig Zpos-fb float
linksp Zpos-fb <= stepgen.2.position-fb
linksp Zpos-fb => axis.2.motor-pos-fb

# send the position commands thru differentiators to
# generate velocity and accel signals
# first load the block module with 6 differentiators
loadrt blocks ddt=7
# link the differentiator functions into the code
addf ddt.0 servo-thread
addf ddt.1 servo-thread
addf ddt.2 servo-thread
addf ddt.3 servo-thread
addf ddt.4 servo-thread
addf ddt.5 servo-thread
addf ddt.6 servo-thread

# define the signals, and hook them up
newsig Xvel float
newsig Xacc float
newsig Xjerk float
linksp Xpos-cmd => ddt.0.in
linkps ddt.0.out => Xvel
linksp Xvel => ddt.1.in
linkps ddt.1.out => Xacc
linksp Xacc => ddt.6.in
linkps ddt.6.out => Xjerk

newsig Yvel float
newsig Yacc float
linksp Ypos-cmd => ddt.2.in
linkps ddt.2.out => Yvel
linksp Yvel => ddt.3.in
linkps ddt.3.out => Yacc

newsig Zvel float
newsig Zacc float
linksp Zpos-cmd => ddt.4.in
linkps ddt.4.out => Zvel
linksp Zvel => ddt.5.in
linkps ddt.5.out => Zacc

# connect enable signals for step generators
newsig Xen bit
linksp Xen <= axis.0.amp-enable-out
linksp Xen => stepgen.0.enable
newsig Yen bit
linksp Yen <= axis.1.amp-enable-out
linksp Yen => stepgen.1.enable
newsig Zen bit
linksp Zen <= axis.2.amp-enable-out
linksp Zen => stepgen.2.enable


# connect signals to step pulse generator outputs
newsig Xstep bit
newsig Xdir  bit
newsig Ystep bit
newsig Ydir  bit
newsig Zstep bit
newsig Zdir  bit
linkps stepgen.0.step Xstep
linkps stepgen.0.dir  Xdir
linkps stepgen.1.step Ystep
linkps stepgen.1.dir  Ydir
linkps stepgen.2.step Zstep
linkps stepgen.2.dir  Zdir

# set stepgen module scaling - get values from ini file
setp stepgen.0.position-scale [AXIS_0]INPUT_SCALE
setp stepgen.1.position-scale [AXIS_1]INPUT_SCALE
setp stepgen.2.position-scale [AXIS_2]INPUT_SCALE

# set stepgen module velocity limits - get values from ini file
setp stepgen.0.maxvel [AXIS_0]HAL_MAXVEL
setp stepgen.1.maxvel [AXIS_1]HAL_MAXVEL
setp stepgen.2.maxvel [AXIS_2]HAL_MAXVEL

# set stepgen module accel limits - get values from ini file
# jmk said to set these to ini value + 5% to avoid stepgen bug
setp stepgen.0.maxaccel [AXIS_0]HAL_MAXACCEL
setp stepgen.1.maxaccel [AXIS_1]HAL_MAXACCEL
setp stepgen.2.maxaccel [AXIS_2]HAL_MAXACCEL

# load realtime portion of scope, just to have it handy
loadrt scope_rt
loadusr halscope
# standard pinout config file for 3-axis steppers
# using a parport for I/O
#
# first load the parport driver
loadrt hal_parport cfg="0x0378"
#
# next connect the parport functions to threads
addf parport.0.read base-thread 1
addf parport.0.write base-thread -1
#
# finally connect physical pins to the signals
linksp Xstep parport.0.pin-03-out
linksp Xdir  parport.0.pin-02-out
linksp Ystep parport.0.pin-05-out
linksp Ydir  parport.0.pin-04-out
linksp Zstep parport.0.pin-07-out
linksp Zdir  parport.0.pin-06-out

# create a signal for the estop loopback
linkpp iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

# create signals for tool loading loopback
linkpp iocontrol.0.tool-prepare iocontrol.0.tool-prepared
linkpp iocontrol.0.tool-change iocontrol.0.tool-changed

setp parport.0.pin-01-out-invert 1
linksp Xen => parport.0.pin-01-out

# create a signal for "spindle on"
setp parport.0.pin-14-out-invert 1
newsig spindle_on bit
linksp spindle_on <= iocontrol.0.spindle-on
linksp spindle_on => parport.0.pin-14-out

