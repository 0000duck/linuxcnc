# HAL config file for MAX NC test machine
#######################################################
# first load all the HAL modules we're going to need
#######################################################
# main motion controller module
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD traj_period_nsec=[EMCMOT]TRAJ_PERIOD key=[EMCMOT]SHMEM_KEY
# using steppers....
loadrt stepgen step_type=0,0,0,0
# I/O thru the parport
loadrt hal_parport cfg="0x0378"
# counting the spindle encoder in software
loadrt encoder num_chan=1
# misc blocks needed to do fun things
loadrt blocks ddt=8 not=1
# gotta see whats happening
loadrt scope_rt

#######################################################
# add realtime functions to the threads
# first the high speed thread
#######################################################
# first we read parport inputs
addf parport.0.read		base-thread
# update encoder counter
addf encoder.update-counters    base-thread
# generate step and dir signals
addf stepgen.make-pulses	base-thread
# write to outputs
addf parport.0.write		base-thread



# now the servo thread
########################################################
# capture axis and spindle positions
addf stepgen.capture-position	servo-thread
addf encoder.capture-position	servo-thread
# process motion commands coming from user space
addf motion-command-handler	servo-thread
# run main motion controller
addf motion-controller		servo-thread
# differentiators to make vel and acc signals
addf ddt.0			servo-thread
addf ddt.1			servo-thread
addf ddt.2			servo-thread
addf ddt.3			servo-thread
addf ddt.4			servo-thread
addf ddt.5			servo-thread
addf ddt.6			servo-thread
addf ddt.7			servo-thread
# other misc blocks
addf not.0			servo-thread
# update output info, axis and spindle
addf stepgen.update-freq	servo-thread



#######################################################
# interconnections
#
# first, the basic stepper machine connections
#######################################################

# connect position commands from motion module to step generator
newsig Xpos-cmd float
linksp Xpos-cmd <= axis.0.motor-pos-cmd
linksp Xpos-cmd => stepgen.0.position-cmd
newsig Ypos-cmd float
linksp Ypos-cmd <= axis.1.motor-pos-cmd
linksp Ypos-cmd => stepgen.1.position-cmd
newsig Zpos-cmd float
linksp Zpos-cmd <= axis.2.motor-pos-cmd
linksp Zpos-cmd => stepgen.2.position-cmd
newsig Apos-cmd float
linksp Apos-cmd <= axis.3.motor-pos-cmd
linksp Apos-cmd => stepgen.3.position-cmd

# connect position feedback from step generators
# to motion module
newsig Xpos-fb float
linksp Xpos-fb <= stepgen.0.position-fb
linksp Xpos-fb => axis.0.motor-pos-fb
newsig Ypos-fb float
linksp Ypos-fb <= stepgen.1.position-fb
linksp Ypos-fb => axis.1.motor-pos-fb
newsig Zpos-fb float
linksp Zpos-fb <= stepgen.2.position-fb
linksp Zpos-fb => axis.2.motor-pos-fb
newsig Apos-fb float
linksp Apos-fb <= stepgen.3.position-fb
linksp Apos-fb => axis.3.motor-pos-fb

# connect enable signals for step generators
newsig Xen bit
linksp Xen <= axis.0.amp-enable-out
linksp Xen => stepgen.0.enable
newsig Yen bit
linksp Yen <= axis.1.amp-enable-out
linksp Yen => stepgen.1.enable
newsig Zen bit
linksp Zen <= axis.2.amp-enable-out
linksp Zen => stepgen.2.enable
newsig Aen bit
linksp Aen <= axis.3.amp-enable-out
linksp Aen => stepgen.3.enable

# connect signals to step pulse generator outputs
newsig Xstep bit
newsig Xdir  bit
newsig Ystep bit
newsig Ydir  bit
newsig Zstep bit
newsig Zdir  bit
newsig Astep bit
newsig Adir  bit
linkps stepgen.0.step => Xstep
linkps stepgen.0.dir  => Xdir
linkps stepgen.1.step => Ystep
linkps stepgen.1.dir  => Ydir
linkps stepgen.2.step => Zstep
linkps stepgen.2.dir  => Zdir
linkps stepgen.3.step => Astep
linkps stepgen.3.dir  => Adir

# create a signal for the estop loopback
linkpp iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

# create signals for tool loading loopback
linkpp iocontrol.0.tool-prepare iocontrol.0.tool-prepared
linkpp iocontrol.0.tool-change iocontrol.0.tool-changed

# create a signal for "spindle on"
newsig spindle_on bit
linksp spindle_on <= iocontrol.0.spindle-on

# connect physical pins to the signals
linksp Xstep		=> parport.0.pin-03-out
linksp Xdir		=> parport.0.pin-02-out
linksp Ystep		=> parport.0.pin-05-out
linksp Ydir		=> parport.0.pin-04-out
linksp Zstep		=> parport.0.pin-07-out
linksp Zdir		=> parport.0.pin-06-out
linksp Astep		=> parport.0.pin-09-out
linksp Adir		=> parport.0.pin-08-out
# amp enable (active lo)
#linksp Xen		=> parport.0.pin-01-out
#setp parport.0.pin-01-out-invert 1

# spindle enable
linksp spindle_on	=> parport.0.pin-14-out
#setp parport.0.pin-01-out-invert 1

#######################################################
# set scaling and other parameters of the basic machine

# set stepgen module scaling - get values from ini file
setp stepgen.0.position-scale [AXIS_0]INPUT_SCALE
setp stepgen.1.position-scale [AXIS_1]INPUT_SCALE
setp stepgen.2.position-scale [AXIS_2]INPUT_SCALE
setp stepgen.3.position-scale [AXIS_3]INPUT_SCALE

# set stepgen module velocity limits - get values from ini file
setp stepgen.0.maxvel [AXIS_0]STEPGEN_MAXVEL
setp stepgen.1.maxvel [AXIS_1]STEPGEN_MAXVEL
setp stepgen.2.maxvel [AXIS_2]STEPGEN_MAXVEL
setp stepgen.3.maxvel [AXIS_3]STEPGEN_MAXVEL

# set stepgen module accel limits - get values from ini file
# jmk said to set these to ini value + 5% to avoid stepgen bug
setp stepgen.0.maxaccel [AXIS_0]STEPGEN_MAXACCEL
setp stepgen.1.maxaccel [AXIS_1]STEPGEN_MAXACCEL
setp stepgen.2.maxaccel [AXIS_2]STEPGEN_MAXACCEL
setp stepgen.3.maxaccel [AXIS_3]STEPGEN_MAXACCEL

# end of basic machine

#######################################################
# Beginning of threading related stuff
#
# TOTALLY EXPERIMENTAL AND PROBABLY BUSTED!
# 
#######################################################

# spindle encoder
# connect encoder signals to encoder counter
newsig spindle-phase-A bit
newsig spindle-phase-B bit
newsig spindle-phase-Z bit
linksp spindle-phase-A => encoder.0.phase-A
linksp spindle-phase-B => encoder.0.phase-B
linksp spindle-phase-Z => encoder.0.phase-Z

linkps parport.0.pin-11-in => spindle-phase-A
linkps parport.0.pin-12-in => spindle-phase-B
linkps parport.0.pin-13-in => spindle-phase-Z

# (that way thread pitches can be straightforward,
#  a 20 tpi thread would multiply the encoder output
#  by 1/20, etc)
setp encoder.0.position-scale 4096

# encoder reset control
# this signal will eventually be driven by the motion
# controller, TRUE for synced motion, FALSE the rest of
# the time.
newsig spindle-sync bit
# needs inverted to connect to index enable
newsig spindle-index-en bit
linksp spindle-sync	=> not.0.in
linkps not.0.out	=> spindle-index-en
linksp spindle-index-en	=> encoder.0.index-enable

# hook up motion controller's sync output
linkps motion.spindle-sync => spindle-sync

# report our revolution count to the motion controller
newsig spindle-pos float
linkps encoder.0.position => spindle-pos
linksp spindle-pos => motion.spindle-revs


#######################################################
# make vel and accel sigs for testing
#######################################################

# send the position commands thru differentiators to
# generate velocity and accel signals (for testing)

# define the signals, and hook them up
newsig Xvel float
newsig Xacc float
linksp Xpos-cmd => ddt.0.in
linkps ddt.0.out => Xvel
linksp Xvel => ddt.1.in
linkps ddt.1.out => Xacc

newsig Yvel float
newsig Yacc float
linksp Ypos-cmd => ddt.2.in
linkps ddt.2.out => Yvel
linksp Yvel => ddt.3.in
linkps ddt.3.out => Yacc

newsig Zvel float
newsig Zacc float
linksp Zpos-cmd => ddt.4.in
linkps ddt.4.out => Zvel
linksp Zvel => ddt.5.in
linkps ddt.5.out => Zacc

newsig Avel float
newsig Aacc float
linksp Apos-cmd => ddt.6.in
linkps ddt.6.out => Avel
linksp Avel => ddt.7.in
linkps ddt.7.out => Aacc


#######################################################
# want a scope to observe things
loadusr halscope

