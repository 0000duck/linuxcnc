
#
# This is a simple sample HAL config file for the hostmot2 driver.
#
# it is configured with environment variables:
#
#     HM2_DRIVER is driver to try to load ie "hm2_7i43" or "hm2_pci"
#
#     HM2_BOARD is board type, ie "7i43" or "5i20"
#
#     HM2_CONFIG is the hostmot2 config string to use (see the hostmot2(9)
#         manpage for a description of this string)
#


# components
loadrt pid num_chan=4 

# only the 7i43 needs this, but it doesnt hurt the others
loadrt probe_parport

# first load the hostmot2 driver, this doesnt do anything by itself, 
# it just waits for low-level drivers to register boards
loadrt hostmot2 debug_idrom=1 debug_module_descriptors=1 debug_pin_descriptors=1 debug_modules=1

# load the low-level driver for the board
# this will load the board's firmware and register it with the hostmot2
# driver loaded above, and it'll show up in HAL
loadrt $(HM2_DRIVER) config="$(HM2_CONFIG)"




#
# set up the watchdog
#

setp hm2_$(HM2_BOARD).0.watchdog.timeout_ns 10000000



#
# set up the encoders, encoder position becomes pid's feedback
#

setp  hm2_$(HM2_BOARD).0.encoder.00.scale  -1024  # cw with negative scale: increasing position
setp  hm2_$(HM2_BOARD).0.encoder.01.scale  2048   # cw with positive scale: increasing position
setp  hm2_$(HM2_BOARD).0.encoder.02.scale  2048   # cw with positive scale: increasing position

net  motor-00-position  hm2_$(HM2_BOARD).0.encoder.00.position =>  pid.0.feedback
net  motor-01-position  hm2_$(HM2_BOARD).0.encoder.01.position =>  pid.1.feedback




#
# set up the pwmgens, let the pid outputs drive the pwm generators
#

net  pid-00-command  pid.0.output  =>  hm2_$(HM2_BOARD).0.pwmgen.00.value
net  pid-01-command  pid.1.output  =>  hm2_$(HM2_BOARD).0.pwmgen.01.value

setp  hm2_$(HM2_BOARD).0.pwmgen.00.scale  1.0   # positive value, positive scale: cw
setp  hm2_$(HM2_BOARD).0.pwmgen.01.scale  -1.0  # positive value, negative scale: cw

# this pwm frequency is appropriate for the Mesa 7i30
setp hm2_$(HM2_BOARD).0.pwmgen.pwm_frequency 40000




#
# PID config
#

setp pid.0.Pgain      2.0
setp pid.0.Igain      0.0
setp pid.0.Dgain      0.0

setp pid.0.FF0        0
setp pid.0.FF1        0
setp pid.0.FF2        0
setp pid.0.bias       0
setp pid.0.deadband   0.0005
setp pid.0.maxoutput  0


setp pid.1.Pgain      2.0
setp pid.1.Igain      0.0
setp pid.1.Dgain      0.0

setp pid.1.FF0        0
setp pid.1.FF1        0
setp pid.1.FF2        0
setp pid.1.bias       0
setp pid.1.deadband   0.0005
setp pid.1.maxoutput  0




#
# stepgen
#

setp hm2_$(HM2_BOARD).0.stepgen.00.dirsetup        200
setp hm2_$(HM2_BOARD).0.stepgen.00.dirhold         200

setp hm2_$(HM2_BOARD).0.stepgen.00.steplen         40000
setp hm2_$(HM2_BOARD).0.stepgen.00.stepspace       40000

setp hm2_$(HM2_BOARD).0.stepgen.00.position-scale  1600

setp hm2_$(HM2_BOARD).0.stepgen.00.maxaccel        0.5
setp hm2_$(HM2_BOARD).0.stepgen.00.maxvel          0.5


setp hm2_$(HM2_BOARD).0.stepgen.01.dirsetup        200
setp hm2_$(HM2_BOARD).0.stepgen.01.dirhold         200

setp hm2_$(HM2_BOARD).0.stepgen.01.steplen         40000
setp hm2_$(HM2_BOARD).0.stepgen.01.stepspace       40000

setp hm2_$(HM2_BOARD).0.stepgen.01.position-scale  -1600

setp hm2_$(HM2_BOARD).0.stepgen.01.maxaccel        10
setp hm2_$(HM2_BOARD).0.stepgen.01.maxvel          0


#setp hm2_$(HM2_BOARD).0.stepgen.02.dirsetup 200
#setp hm2_$(HM2_BOARD).0.stepgen.02.dirhold  200
#
#setp hm2_$(HM2_BOARD).0.stepgen.02.steplen  40000
#setp hm2_$(HM2_BOARD).0.stepgen.02.stepspace  40000
#
#setp hm2_$(HM2_BOARD).0.stepgen.02.position-scale  1600


#setp hm2_$(HM2_BOARD).0.stepgen.03.dirsetup 200
#setp hm2_$(HM2_BOARD).0.stepgen.03.dirhold  200
#
#setp hm2_$(HM2_BOARD).0.stepgen.03.steplen  40000
#setp hm2_$(HM2_BOARD).0.stepgen.03.stepspace  40000
#
#setp hm2_$(HM2_BOARD).0.stepgen.03.position-scale  1600




#
# stepper 0 and servos 0 and 1 clone servo 2's position
#

net follow-the-leader hm2_$(HM2_BOARD).0.encoder.02.position
net follow-the-leader => pid.0.command
net follow-the-leader => pid.1.command
net follow-the-leader => hm2_$(HM2_BOARD).0.stepgen.00.position-cmd
net follow-the-leader => hm2_$(HM2_BOARD).0.stepgen.01.position-cmd




#
# enable
#

newsig  Enable  bit
sets    Enable  FALSE
net     Enable  =>  pid.0.enable
net     Enable  =>  pid.1.enable
net     Enable  =>  hm2_$(HM2_BOARD).0.pwmgen.00.enable
net     Enable  =>  hm2_$(HM2_BOARD).0.pwmgen.01.enable
net     Enable  =>  hm2_$(HM2_BOARD).0.stepgen.00.enable
net     Enable  =>  hm2_$(HM2_BOARD).0.stepgen.01.enable




#
# realtime threads & functions
#

loadrt threads   name1=main fp1=1 period1=1000000


addf hm2_$(HM2_BOARD).0.pet_watchdog  main
addf hm2_$(HM2_BOARD).0.read          main
addf pid.0.do-pid-calcs               main
addf pid.1.do-pid-calcs               main
addf hm2_$(HM2_BOARD).0.write         main




#
# my steppers need open collector outputs
# 
# I determined the pins to switch to open drain by looking at the hm2 pin
# report in the dmesg output
#

# stepgen.00 step & dir
setp hm2_$(HM2_BOARD).0.gpio.P4.048.is_opendrain 1
setp hm2_$(HM2_BOARD).0.gpio.P4.049.is_opendrain 1

# stepgen.01 step & dir
setp hm2_$(HM2_BOARD).0.gpio.P4.054.is_opendrain 1
setp hm2_$(HM2_BOARD).0.gpio.P4.055.is_opendrain 1




#
# ok, all set up
#

start

sets Enable 1

