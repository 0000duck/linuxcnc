:lang: fr

= L'utilitaire graphique NGCGUI

[[cha:ngcgui]] (((NGCGUI)))

image::images/ngcgui_fr.png[]

== Vue d'ensemble
    
* 'NGCGUI' est un utilitaire écrit en TCL, pour utiliser les sous-programmes
  de LinuxCNC.
* 'NGCGUI' peut être lancé comme une application autonome ou embarqué
   dans des pages multi-onglets dans l'interface graphique Axis
* 'PYNGCGUI' est une alternative de Ngcgui, implémentée en Python.
* 'PYNGCGUI' peut également être une application autonome ou embarquée
   dans une page à onglets (avec ses propres et multiples jeux de sous
   programmes) dans ses onglets, dans n'importe quelle interface graphique
   supportant l'intégration des applications Gladevcp. Par exemple, sont incluse:
   axis, touchy, gscreen et gmoccapy

Utilisation de NGCGUI ou PYNGCGUI:

* Les pages d'onglets sont fournies pour les sous-programmes spécifiés dans
  le fichier ini.
* De nouvelles pages à onglets peuvent être ajoutées à l'aide des onglets
  personnalisés.
* Chaque page d'onglets de sous-programme fournit des boîtes de saisie pour
  tous les paramètres de sous-programme.
* Les boîtes de saisie peuvent avoir une valeur par défaut et une étiquette,
  qui sont identifiées par des commentaires spéciaux, dans le fichier de
  sous-programme.
* Les invocations de sous-programmes sont concaténés pour former un
  programme multi-étapes.
* Tout sous-programme G-code qui est conforme aux conventions ngcgui peut
  être utilisé.
* Tout programme GCMC (GCode-méta-compilateur) qui est conforme aux
  conventions ngcgui pour le marquage variables, peut être utilisé.

[NOTE]
NGCGUI et PYNGCGUI implémentent les mêmes fonctions et les deux processus,
les fichier .ngc et les fichiers .gcmc, conformes aux quelques conventions
spécifiques ngcgui. Dans le présent document, le terme se réfère
généralement à NGCGUI soit l'application.

== Démonstration et configurations

Un bon nombre de configurations de démonstration sont disponibles dans le
répertoire sim, parmi les configurations offertes par le sélecteur de
configuration de LinuxCNC. Le sélecteur de configuration se trouve dans le
menu principal du système, sous:

  Applications -> CNC -> LinuxCNC

Des exemples sont inclus pour les interfaces graphiques axis, touchy,
gscreen et gmoccapy. Ces exemples montrent des configurations pour machine 3
axes (XYZ cartésiens, telles que fraiseuses) ou les tours (XZ). Certains
exemples montrent l'utilisation de claviers surgissants pour systèmes à
écran tactile, d'autres exemples montrent l'utilisation de fichiers créés
par l'application gcmc ( Gcode Meta Compiler). Les exemples touchy montrent
également l'intégration du parcours d'outil gladevcp (gremlin_view).

Les applications simples sont dans:
 
  Sample Configurations/sim/axis/ngcgui/ngcgui_simple

Un exemple compréhensible montrant la compatibilité avec gcmc:

  Sample Configurations/sim/axis/ngcgui/ngcgui_gcmc

Un exemple compréhensible, intégré dans une application gladevcp et
utilisant gcmc:

  Sample Configurations/sim/gscreen/ngcgui/pyngcgui_gcmc


Les exemples de configurations en sim, fournissent une bibliothèque
d'exemples de sous-programme G-code (.ngc) et issus du
méta-compilateur-Gcode (.gcmc):

* 'nc_files/ngcgui_lib'
** 'arc1.ngc' - arc simple utilisant la compensation de rayon d'outil
** 'arc2.ngc' - arc par le centre, offset, largeur, angle (appel arc1)
** 'backlash.ngc' - routine pour mesurer le jeu d'un axe (backlash) avec un micromètre
** 'db25.ngc' - crée une découpe de prise DB25
** 'gosper.ngc' - une démo récursive (flocon de neige)
** 'helix.ngc' - découpe une hélice ou un D-hole
** 'helix_rtheta.ngc' - hélice ou D-hole positionné par rayon et angle
** 'hole_circle.ngc' - trous espacés régulièrement sur un cercle
** 'ihex.ngc' - hexagone interne
** 'iquad.ngc' - quadrilatère interne
** 'ohex.ngc' - hexagone externe
** 'oquad.ngc' - quadrilatère externe
** 'qpex_mm.ngc' - démo de poches en mm
** 'qpex.ngc' - démo de poches en pouce
** 'qpocket.ngc' - poche quadrilatère
** 'rectangle_probe.ngc' - palpation d'une zone rectangulaire
** 'simp.ngc' - un simple sous-programme pour créer deux cercles
** 'slot.ngc' - rainure entre deux points
** 'xyz.ngc' - machine exerciseur à une forme de boîte

* 'nc_files/ngcgui_lib/lathe'
** 'g76base.ngc' - gui pour filetage avec G76
** 'g76diam.ngc' - filetage avec diamètres majeur et mineur
** 'id.ngc' - alésage d'un diamètre intérieur
** 'od.ngc' - tournage d'un diamètre extérieur
** 'taper-od.ngc' - tournage d'un filetage sur diamètre extérieur

* 'nc_files/gcmc_lib'
** 'drill.gcmc' - perçages d'une forme rectangulaire
** 'square.gcmc' - simple démo de tags de variable de fichiers gcmc
** 'star.gcmc' - démo gcmc illustrant les fonctions et les tableaux
** 'wheels.gcmc' - démo gcmc pour des formes complexes

Pour essayer une démonstration, sélectionner une configuration sim et
démarrer le programme linuxCNC.

Si Axis est utilisé, presser 'l'Arrêt d'urgence'
image:images/tool_estop.gif[] puis 'Marche machine'
image:images/tool_power.gif[] puis 'POM de tous les axes'. Choisir un onglet
ngcgui, remplir les espaces vides avec des valeurs et presser 'Créer
Feature' puis 'Finaliser'. Finalement, presser le bouton 'Run'
image:images/tool_run.gif[] pour voir le résultat. Expérimenter en créant de
multiples fonctionnalités et caractéristiques depuis les différentes pages
d'onglets.

Les autres GUI devront fonctionner de manière similaire, mais les boutons et
les noms peuvent être différents.

[NOTE]
===============================
Les configs de démonstration créent des pages d'onglets pour quelques-uns
des exemples fournis. Toute GUI avec une page d'onglets personnalisés peut
ouvrir n'importe quel exemple de sous-programme de la bibliothèque, ou
n'importe quel fichier utilisateur si il est dans le chemin des
sous-programmes de LinuxCNC.

Pour voir les raccourcis clavier spéciaux, cliquer à l'intérieur d'une page
d'onglet ngcgui pour avoir le focus, puis Presser Control-k.

Les sous-programmes de démonstration doivent se lancer avec une
configuration en mode simulation incluse dans la distribution.
L'utilisateur doit comprendre le comportement et le but d'un
programme avant de le lancer sur une machine réelle.
===============================

== Emplacement des librairies

Dans les installations LinuxCNC installées à partir de paquets deb, les
configs de simulation pour ngcgui utilisent des liens symboliques vers des
librairies LinuxCNC protégées en écriture pour l'utilisateur:

* 'nc_files/ngcgui_lib'            sous-programmes ngcgui-compatibles
* 'nc_files/ngcgui_lib/lathe'    sous-programmes de tournage ngcgui-compatibles
* 'nc_files/gcmc_lib'               programmes ngcgui-gcmc-compatibles
* 'nc_files/ngcgui_lib/utilitysubs' Assistant de sous-programmes
* 'nc_files/ngcgui_lib/mfiles'      M-files utilisateur

Ces librairies sont localisées par des éléments du fichier ini, spécifiant
les chemins de recherche utilisés par LinuxCNC (et ngcgui):

----
[RS274NGC]
SUBROUTINE_PATH = ../../nc_files/ngcgui_lib:../../nc_files/gcmc_lib:../../nc_files/ngcgui_lib/utilitysubs
USER_M_PATH     = ../../nc_files/ngcgui_lib/mfiles
----

[NOTE]
Ce sont de longues lignes (non découpées en multiples lignes) qui spécifient
les répertoires utilisés dans le chemin de recherche. Les noms de répertoire
sont séparés par deux points (:). Aucun espace ne doit être utilisé dans les
noms de répertoire.

Un utilisateur peux créer de nouveaux répertoires pour ces propres
sous-programmes et ses M-files et les ajouter dans le(s) chemin de
recherche.

Par exemple, un utilisateur peut créer des répertoires depuis la console avec les commandes:
----
mkdir /home/myusername/mysubs
mkdir /home/myusername/mymfiles
----

Et puis créer, ou copier des fichiers du système dans ces répertoires, dans
lesquels il a les droits d'écriture. Par exemple, un utilisateur peut créer
un sous-fichier ngcgui-compatible nomé:

----
/home/myusername/mysubs/example.ngc
----

Pour utiliser les fichiers de ces nouveaux répertoires, le fichier ini doit
être édité pour inclure les nouveaux sous fichiers et pour augmenter le(s)
chemin de recherche. Pour cet exemple:

----
[RS274NGC]
...
SUBROUTINE_PATH = /home/myusername/mysubs:../../nc_files/ngcgui_lib:../../nc_files/gcmc_lib:../../nc_files/ngcgui_lib/utilitysubs
USER_M_PATH     = /home/myusername/mymfiles:../../nc_files/ngcgui_lib/mfiles

[DISPLAY]
...
NGCGUI_SUBFILE = exemple.ngc
...
----

LinuxCNC (et ngcgui) utilisent le premier fichier trouvé quand ils cherchent
dans les répertoires contenus dans le chemin de recherche.  Avec ce
comportement, il est possible de substituer un fichier ngcgui_lib en plaçant
un fichier portant un nom identique dans un répertoire qui sera trouvé en
premier dans le chemin de recherche. Plus d'informations se trouvent dans le
chapitre sur le fichier ini du manuel de configuration.


== Utilisation autonome
=== NGCGUI en autonome
Pour l'utiliser, taper dans un terminal:
----
ngcgui --help
Usage:
  ngcgui --help | -?
  ngcgui [Options] -D nc_files_directory_name
  ngcgui [Options] -i LinuxCNC_inifile_name
  ngcgui [Options]

  Options:
         [-S subroutine_file]
         [-p preamble_file]
         [-P postamble_file]
         [-o output_file]
         [-a autosend_file]            (envoi auto à Axis défaut:auto.ngc)
         [--noauto]                    (pas d'envoi auto à Axis)
         [-N | --nom2]                 (pas de terminateur M2 (utilise %))
         [--font [big|small|fontspec]] (défaut: "Helvetica -10 normal")
         [--horiz|--vert]              (défaut: --horiz)
         [--cwidth comment_width]      (largeur du champ commentaire)
         [--vwidth varname_width]      (largeur du champ de varname)
         [--quiet]                    (moins de commentaires de le fichier de sortie)
         [--noiframe]              (défaut: trame d'affichages image)
----
[NOTE]
En temps qu'application autonome, ngcgui gère un fichier de sous-programme
unique, qui peut être invoqué plusieurs fois. Plusieurs applications de
ngcgui autonomes, peuvent être démarrées indépendamment.

=== PYNGCGUI en autonome
Pour l'utiliser, taper dans un terminal:
----
pyngcgui --help
Usage:
pyngcgui [Options] [sub_filename]
Options requiring values:
    [-d | --demo] [0|1|2] (0: DEMO autonome toplevel)
                          (1: DEMO intégré nouveau notebook)
                          (2: DEMO intégré dans notebook existant)
    [-S | --subfile       sub_filename]
    [-p | --preamble      preambule_filename]
    [-P | --postamble     postambule_filename]
    [-i | --ini           inifile_name]
    [-a | --autofile      autoauto_filename]
    [-t | --test          testno]
    [-H | --height        height_of_entry widget] (typ 20-40)
    [-K | --keyboardfile  glade_file] (utilise fichier glage pour clavier surgissant)
Solo Options:
    [-v | --verbose]
    [-D | --debug]
    [-N | --nom2]         (pas de terminateur M2 (utilise %))
    [-n | --noauto]       (sauve mais n’envoie pas le résultat automatiquement)
    [-k | --keyboard]     (utilise défaut clavier surgissant)
    [-s | --sendtoaxis]   (envoie le ngc généré à Axis)
Notes:
      Un jeu de fichiers est fournis pour les préambules, sous-fichiers, postambules.
      Les préambule et postambule sont optionnels.
      Un jeu de fichiers peut être spécifié depuis la ligne de commande.
      De multiples jeux de fichiers peuvent être spécifiés dans un fichier ini.
      Si --ini n'est PAS spécifié:
         cherche pour un LinuxCNC fonctionnant et utilise son fichier ini
----
    
[NOTE]
En temps qu'application autonome, pyngcgui peut lire un fichier ini (ou une
application linuxcnc en fonctionnement) pour créer des pages d'onglets pour
plusieurs sous-fichiers.

== Intégration de NGCGUI
=== L'intégration de NGCGUI dans Axis
Les éléments du fichier ini suivants se trouve dans la section
[DISPLAY]. (Voir plus loin pour les éléments additionnels nécessaires) 

* 'TKPKG = Ngcgui 1.0' - le paquet NGCGUI
* 'TKPKG = Ngcguittt 1.0' - le paquet du traceur True Type pour générer du texte
   à graver (optionnel, doit suivre TKPKG = Ngcgui).
* 'TTT = truetype-tracer' - nom du programme traceur truetype (il doit être dans le PATH utilisateur)
* 'TTT_PREAMBLE = in_std.ngc' - Optionnel, spécifie nom de fichier pour le préambule utilisé pour
   créer les sous-fichiers ttt. (alternativement: mm_std.ngc)

[NOTE]
Les éléments optionnels du traceur TrueType, sont utilisés pour spécifier
une page d'onglet, compatible avec ngcgui qui utilise l'application traceur
TrueType. L'application traceur TrueType doit être installée de manière
indépendante et située dans le PATH de l'utilisateur.
 
=== Intégration de PYNGCGUI comme page d'onglet gladevcp dans une GUI
Les éléments suivants du fichier ini se trouve dans la section [DISPLAY],
pour être utilisés avec les GUI axis, gscreen, ou touchy.  (Voir plus loin
pour les éléments additionnels nécessaires)

.EMBED_ Items
....
EMBED_TAB_NAME = Pyngcgui - nom qui doit apparaître dans l'onglet
EMBED_TAB_COMMAND = gladevcp -x {XID} pyngcgui_axis.ui - invoque gladevcp
EMBED_TAB_LOCATION = name_of_location - où la page intégrée est située
....

[NOTE]
Le spécificateur EMBED_TAB_LOCATION n'est pas utilisé pour la GUI
Axis. Alors que pyngcgui, lui peut être intégré dans Axis, l'intégration est
plus complète avec l'usage de ngcgui (utilisant TKPKG = Ngcgui 1.0). Pour
spécifier EMBED_TAB_LOCATION pour les autres GUI, voir les exemples de
fichiers ini.

[NOTE]
Le frontal GUI du traceur truetype n'est pas encore disponible
pour les applications gladevcp

=== Éléments additionnels du fichier ini requis par ngcgui ou pyngcgui
Les éléments de fichier ini suivants, se trouvent dans dans la section
[DISPLAY], pour toute GUI intégrant ngcgui ou pyngcgui.

* 'NGCGUI_FONT = Helvetica -12 normal' - spécifie le nom de la police, sa
  taille, normal|gras
* 'NGCGUI_PREAMBLE = in_std.ngc' - le fichier de préambule ajouté devant le
  sous-programme. Quand plusieurs invocations de sous-programmes sont concaténées, le préambule
 est seulement ajouté une fois. Pour les machines en métrique, utiliser mm_std.ngc
* 'NGCGUI_SUBFILE = filename1.ngc' - crée un onglet depuis le sous-programme filename1
* 'NGCGUI_SUBFILE = filename2.ngc' - crée un onglet depuis le sous-programme filename2
* '... etc'
* 'NGCGUI_SUBFILE = gcmcname1.gcmc' - crée un onglet depuis le fichier gcmcname1
* 'NGCGUI_SUBFILE = gcmcname2.gcmc' - crée un onglet depuis le fichier gcmcname2
* '... etc'
* 'NGCGUI_SUBFILE = ""' - crée un onglet personnalisé pouvant ouvrir tout sous-programme présent dans le chemin de recherche
* 'NGCGUI_OPTIONS = opt1 opt2 ...' - options NGCGUI
** 'nonew' - désactive la possibilité de faire un nouvel onglet personnalisé
** 'noremove' - désactive la suppression de page d'onglets
** 'noauto' - pas d'envoi auto (utiliser makefile, puis sauver ou envoyer manuellement)
** 'noiframe' - pas d'image interne, affiche les images sur un autre niveau de widget séparé
** 'nom2' - ne se termine pas avec m2 mais utilise le terminateur %. Cette option élimine tous
    les effets de bord du terminateur m2
* 'GCMC_INCLUDE_PATH = dirname1:dirname2' - répertoire de recherche de fichiers include pour gcmc

C'est un exemple d'intégration de NGCGUI dans Axis. Les sous-programmes
doivent être dans un répertoire défini par
RS274NGC]SUBROUTINE_PATH. Certains exemples de sous-programmes utilisent
d'autres sous-programmes, bien vérifier les dépendances, le cas échéant,
dans un répertoire de SUBROUTINE_PATH. Certains sous-programmes peuvent
utiliser des M-files qui doivent être dans un répertoire défini par le
[RS274NGC]USER_M_PATH.

Le méta-compilateur de Gcode (gcmc) peut inclure des déclarations telles que:
  include("filename.inc.gcmc");
Par défaut, gcmc inclut le répertoire courant qui, pour LinuxCNC, sera le
répertoire contenant le fichier ini de LinuxCNC. Des répertoires additionnels
peuvent être préfixés à la commande de recherche de gcmc avec l'élément GCMC_INCLUDE_PATH.

.échantillon d'ini basé sur Axis
----
[RS274NGC]
...
SUBROUTINE_PATH   = ../../nc_files/ngcgui_lib:../../ngcgui_lib/utilitysubs
USER_M_PATH       = ../../nc_files/ngcgui_lib/mfiles

[DISPLAY]
TKPKG             = Ngcgui    1.0
TKPKG             = Ngcguittt 1.0
# Ngcgui doit précéder Ngcguittt

NGCGUI_FONT       = Helvetica -12 normal
# spécifie noms de fichiers seulement, doivent être dans [RS274NGC]SUBROUTINE_PATH
NGCGUI_PREAMBLE   = in_std.ngc
NGCGUI_SUBFILE    = simp.ngc
NGCGUI_SUBFILE    = xyz.ngc
NGCGUI_SUBFILE    = iquad.ngc
NGCGUI_SUBFILE    = db25.ngc
NGCGUI_SUBFILE    = ihex.ngc
NGCGUI_SUBFILE    = gosper.ngc
# specify "" for a custom tab page
NGCGUI_SUBFILE    = ""
#NGCGUI_SUBFILE   = "" utilisé quand une trame d'image est spécifiée si
#                      l'ouverture d'autres fichiers est requise
#                      les images seront mise à un niveau de fenêtre supérieur
NGCGUI_OPTIONS    =
#NGCGUI_OPTIONS   = opt1 opt2 ...
# opt items:
#   nonew      -- désactive la possibilité de faire un nouvel onglet personnalisé
#   noremove   -- désactive la suppression de page d'onglets
#   noauto     -- pas d'envoi auto (utiliser makefile, puis sauver ou envoyer manuellement)
#   noiframe   -- pas d'image interne, affiche les images sur un autre niveau séparé
GCMC_INCLUDE_PATH = /home/myname/gcmc_includes

TTT               = truetype-tracer
TTT_PREAMBLE      = in_std.ngc

PROGRAM_PREFIX    = ../../nc_files
----

[NOTE]
Le petit ini ci-dessus, n'est pas un ini complet pour Axis, les éléments
affichés sont ceux utilisés par ngcgui. Beaucoup d'autres éléments sont
requis par LinuxCNC pour d'avoir un fichier INI complet.


=== Traceur Truetype

Ngcgui_ttt fournit un support pour TrueType-traceur (v4). Il crée une page à
onglets dans Axis, qui permet l'utilisateur de créer une nouvelle page à
onglet ngcgui, après la saisie de texte et en sélectionnant une police et
d'autres paramètres. (TrueType-traceur doit être installé indépendamment).

Pour intégrer ngcgui_ttt dans Axis, spécifier les éléments suivants en plus de ceux de ngcgui:
....
Élément:    [DISPLAY]TKPKG = Ngcgui_ttt version_number
Exemple: [DISPLAY]TKPKG = Ngcgui_ttt 1.0
Remarque:  Spécifier obligatoirement, le chargement de ngcgui_ttt dans la page à onglet d'Axis nommée ttt.
         Doit suivre l'élément TKPKG = Ngcgui.

Élément:    [DISPLAY]TTT = path_to_truetype-tracer
Exemple: [DISPLAY]TTT = truetype-tracer
Remarque:   En option, si non spécifié, tentera d'utiliser /usr/local/bin/truetype-tracer.
         Spécifier un chemin absolu ou un nom simple d'exécutable
         dans ce cas, la variable utilisateur PATH sera utilisée pour trouver le programme.

Élément:    [DISPLAY]TTT_PREAMBLE = préambule_filename
Exemple: [DISPLAY]TTT_PREAMBLE = in_std.ngc
Remarque:    Facultatif, spécifie le nom du préambule ttt, utilisé pour créer les sous-fichiers.
....

=== Spécifications du chemin du fichier ini

Ngcgui utilise le chemin de recherche de LinuxCNC pour trouver les fichiers.

Le chemin de recherche commence par le répertoire standard spécifié par:

  [DISPLAY]PROGRAM_PREFIX = nom_repertoire

suivi par plusieurs répertoires spécifiés par:

  [RS274NGC]SUBROUTINE_PATH = nom_repertoire1:nom_repertoire2:nom_repertoire3 ...

Les répertoires peuvent être spécifiés par des chemins absolus ou relatifs.
....
Exemple 1:
[DISPLAY]PROGRAM_PREFIX = /home/myname/linuxcnc/nc_files
Exemple 2:
[DISPLAY]PROGRAM_PREFIX = ~/linuxcnc/nc_files
Exemple 3:
[DISPLAY]PROGRAM_PREFIX = ../../nc_files
....

Un chemin absolu commence avec un / qui indique un emplacement par rapport
au système de fichiers complet.  Un chemin qui commence par ~/ indique un
chemin commençant 'depuis' le répertoire home de l'utilisateur. Un chemin
qui commence par ~nomutilisateur indique un chemin commençant 'dans' le
répertoire utilisateur.

.Chemins relatifs
Un chemin relatif commence dans le répertoire de démarrage qui est celui
contenant le fichier ini. L'usage des chemins relatifs facilite l'accès aux
configurations mais requiert une bonne compréhension de la façon dont les
chemins sont spécifiés sous Linux.

....
   ./d0         le même que d0, ex: un répertoire nommé d0 dans le répertoire de démarrage
   ../d1        se réfère au répertoire d1 dans le répertoire parent
   ../../d2     se réfère au répertoire d2 dans le parent du répertoire parent
   ../../../d3  etc.
....

Plusieurs répertoires peuvent être spécifiés avec [RS274NGC] SUBROUTINE_PATH
en les séparant par deux points. L'exemple suivant illustre le format de
plusieurs répertoires et montre l'utilisation de chemins relatifs et
absolus.

.Exemple avec plusieurs répertoires:
----
[RS274NGC]SUBROUTINE_PATH = ../../nc_files/ngcgui_lib:../../nc_files/ngcgui_lib/utilitysubs:/tmp/tmpngc`
----

C'est une longue ligne, ne pas la couper en plusieurs lignes. Lorsque
LinuxCNC et/ou ngcgui recherchent des fichiers, le premier fichier trouvé
dans la recherche est utilisé.

LinuxCNC (et ngcgui) doivent être en mesure de trouver tous les
sous-programmes, dont les routines d'assistance qui sont appelées depuis les
sous-fichiers de ngcgui. Il est commode de placer les sous-programmes
utilitaires dans un répertoire séparé comme indiqué dans l'exemple
ci-dessus.

La distribution comprend le répertoire de ngcgui_lib et des fichiers de
démonstration pour préambules, sous-fichiers, postambules et fichiers
d'aide. Pour modifier le comportement des fichiers, copier n'importe quel
fichier et le placer dans une première partie du chemin de recherche. Le
premier répertoire recherché est [DISPLAY] PROGRAM_PREFIX. Il est possible
d'utiliser ce répertoire mais il est préférable d'en créer d'autres, dédiés
et de les mettre au début de la section [RS274NGC] SUBROUTINE_PATH.

Dans l'exemple suivant, les fichiers dans /home/myname/linuxcnc/mysubs
seront trouvés avant les fichiers dans ../../nc_files/ngcgui_lib.

.Exemple d'ajout d'un répertoire personnalisé: 
----
[RS274NGC]SUBROUTINE_PATH = /home/myname/linuxcnc/mysubs:../../nc_files/ngcgui_lib:../../nc_files/ngcgui_lib/utilitysubs`
----

Les nouveaux utilisateurs peuvent essayer d'utiliser, par inadvertance, des
fichiers qui ne sont pas structurés de manière à être compatible avec les
exigences de ngcgui. Ngcgui signalera probablement de nombreuses erreurs si
les fichiers ne sont pas codés selon ses conventions. Une bonne pratique
suggère que les sous-fichiers compatibles avec ngcgui, soient placés dans un
répertoire dédié à cet effet et que les préambules, postambules et fichiers
d'aide soient dans un répertoire séparé, pour décourager les tentatives de
les utiliser comme sous-fichiers. Les fichiers non destinés à être utilisés
comme sous-fichiers, peuvent inclure un commentaire particulier:
"(not_a_subfile) " pour que ngcgui les rejette automatiquement avec un
message pertinent.

=== Résumé en détail des éléments de fichier ini utilisés par NGCGUI
....
Élément:    [RS274NGC]SUBROUTINE_PATH = dirname1:dirname2:dirname3 ...
Exemple: [RS274NGC]SUBROUTINE_PATH = ../../nc_files/ngcgui_lib:../../nc_files/ngcgui_lib/utilitysubs
Remarque:    Facultatif, mais très utile pour organiser les sous-fichiers et les fichiers utilitaires

Élément:    [RS274NGC]USER_M_PATH = dirname1:dirname2:dirname3 ...
Exemple: [RS274NGC]USER_M_PATH = ../../nc_files/ngcgui_lib/mfiles
Remarque:    Optionnel, requis pour localiser les M-files personnalisées


Élément:    [DISPLAY]EMBED_TAB_NAME = nom à afficher sur la page d'onglets intégrée
Exemple: [DISPLAY]EMBED_TAB_NAME = Pyngcgui
Remarque:    Les entrées: EMBED_TAB_NAME, EMBED_TAB_COMMAND et EMBED_TAB_LOCATION
          définissent une application intégrée pour plusieurs interfaces LinuxCNC

Élément:    [DISPLAY]EMBED_TAB_COMMAND = nom programme suivi par arguments
Exemple: [DISPLAY]EMBED_TAB_COMMAND = gladevcp -x {XID} pyngcgui_axis.ui
Remarque:    Pour les applications GladeVCP, voir la page du manuel de gladevcp

Élément:    [DISPLAY]EMBED_TAB_LOCATION = name_of_location
Exemple: [DISPLAY]EMBED_TAB_LOCATION = notebook_main
Remarque:    Voir exemple de fichiers INI, pour les emplacements possibles
          Non requis pour Axis


Élément:    [DISPLAY]PROGRAM_PREFIX = dirname
Exemple: [DISPLAY]PROGRAM_PREFIX = ../../nc_files
Remarque:    Obligatoire et nécessaire pour de nombreuses fonctions de LinuxCNC
            C'est le premier répertoire utilisé dans la recherche de fichiers


Élément:    [DISPLAY]TKPKG = Ngcgui version_number
Exemple: [DISPLAY]TKPKG = Ngcgui 1.0
Remarque:    Nécessaire uniquement pour l'intégration dans Axis, défini le chargement des pages d'onglet ngcgui dans Axis


Élément:    [DISPLAY]NGCGUI_FONT = font_descriptor
Exemple: [DISPLAY]NGCGUI_FONT = Helvetica -12 normal
Remarque:    Facultatif, font_descriptor est un spécificateur de police tcl-compatible
         avec des éléments pour type de police, taille et largeur de police
         Par défaut: Helvetica -10 normal
         Les petites tailles de police peuvent être utiles pour les petits écrans
         Les grande tailles de police peuvent être utiles pour les écrans tactiles

Item:    [DISPLAY]NGCGUI_SUBFILE = subfile_filename
Exemple: [DISPLAY]NGCGUI_SUBFILE = simp.ngc
Exemple: [DISPLAY]NGCGUI_SUBFILE = square.gcmc
Exemple: [DISPLAY]NGCGUI_SUBFILE = ""
Remarque:    Utiliser un ou plusieurs éléments pour spécifier les sous-fichiers
         ou fichiers gcmc ngcgui-compatibles requérant une page à onglet au démarrage.
         Un onglet "personnalisé" sera créé quand le nom de fichier est "".
         Un utilisateur peut utiliser un onglet "personnalisé" pour parcourir le système
         de fichiers et d'identifier préambule, sous-fichier, et les fichiers de postambule.

Élément:    [DISPLAY]NGCGUI_PREAMBLE = preamble_filename
Exemple: [DISPLAY]NGCGUI_PREAMBLE = in_std.ngc
Remarque:    En option, lorsque spécifié, le fichier est ajouté au début d'un sous-fichier.
                    Les fichiers créés avec des pages d'onglets "Personnalisées" utilisent
                    le préambule spécifié avec la page.

Élément:    [DISPLAY]NGCGUI_POSTAMBLE = postamble_filename
Exemple: [DISPLAY]NGCGUI_POSTAMBLE = bye.ngc
Remarque:    En option, lorsque spécifié, le fichier est ajouté à un sous-fichiers.
         Les fichiers créés avec les pages d'onglets "Personnalisées" utilisent le postambule
         spécifié avec la page.

Élément:    [DISPLAY]NGCGUI_OPTIONS = opt1 opt2 ...
Exemple: [DISPLAY]NGCGUI_OPTIONS = nonew noremove
Remarque:    Les options multiples sont séparées par des espaces.
         Par défaut, ngcgui configure les pages d'onglets de cette manière:
            1) l'utilisateur peux faire de nouveaux onglets
            2) l'utilisateur peux supprimer des onglets, excepté le dernier restant
            3) les fichiers finalisés sont automatiquement envoyés à LinuxCNC
            4) une trame d'image (iframe) est rendue disponible pour affichager
               une image pour le sous-fichier (si une image est fournie)
            5) le fichier ngcgui résultant envoyé à LinuxCNC se termine par
               un M2 (et encourt les effets secondaires de M2)

         Les options nonew, noremove, noauto, noiframe, nom2
         respectivement désactiver ces comportements par défaut.

         Par défaut, si une image (.png,.gif,jpg,pgm)
         est trouvée dans le même répertoire que le sous-fichier,
         l'image est affichée dans l'iframe.  Spécifier
         l'option noiframe rends disponibles des boutons additionnels
         pour sélectionner les cases à cocher des préambules, sous-fichiers
         et postambules additionnels. La sélection des cases à cocher
         sont toujours disponible avec les touches spéciales:
           Ctrl-R bascule "Retain values on Subfile read"
           Ctrl-E bascule "Expand subroutine"
           Ctrl-a bascule "Autosend"
          (Ctrl-k liste complète des touches spéciales)

         Si noiframe est spécifié et qu'un fichier image est trouvé,
         l'image est affichée dans une fenêtre séparée et toutes
         les fonctions sont disponibles dans la page d'onglets.

         Les NGCGUI_OPTIONS s'appliquent à tous les onglets ngcgui sauf les
          options nonew et noremove ne sont pas applicables pour les onglets
          "personnalisée". Ne pas utiliser d'onglet "personnalisé" si on veux
          limiter la capacité de l'utilisateur à sélectionner des sous-fichiers ou créer
          des onglets supplémentaires.

Élément:    [DISPLAY]GCMC_INCLUDE_PATH = dirname1:dirname2:...
Exemple: [DISPLAY]GCMC_INCLUDE_PATH = /home/myname/gcmc_includes:/home/myname/gcmc_includes2
Remarque:    En option, chaque répertoire sera incluse lorsque GCMC est invoqué
          en utilisant l'option: --include dirname

....

== Exigences des fichiers pour la compatibilité NGCGUI
=== Exigences des fichiers G-code (.ngc) seuls

Un sous-fichiers compatible NGCGUI contient une simple définition de
sous-programme. Le nom du sous-programme doit être le même que celui du
fichier (non inclus l'extension .ngc). LinuxCNC supporte les sous-programmes
nommés ou numérotés, mais seuls les sous-programmes nommés sont compatible
avec NGCGUI. Pour plus d'informations voir le chapitre sur les
<<cha:O-codes,O-Codes>>.

La première ligne, autre qu'un commentaire, doit être une déclaration
'sub'. La dernière ligne, autre qu'un commentaire, doit être une déclaration
'endsub'.

.exemple.ngc:
----
(info: texte_apparaissant_en_haut_de_la_page_d_onglets
; ligne de commentaire commençant avec un point virgule
( ligne de commentaire utilisant des parenthèses)
o<exemple> sub
  CORPS DU SOUS-PROGRAMME
o<exemple> endsub
; ligne de commentaire commençant avec un point virgule
( ligne de commentaire utilisant des parenthèses)
----

Le corps du sous-programme doit commencer par un jeu de déclarations
définissant les paramètres nommés locaux pour chaque paramètre positionnel
attendu pour l'appel du sous-programme. Ces définitions doivent être
consécutives, commencer par #1 et finir avec le numéro du dernier paramètre
utilisé. Les définitions doivent être fournies pour chacun de ces paramètres
(aucune omission).

.Numérotation des paramètres
----
#<xparm> = #1
#<yparm> = #2
#<zparm> = #3
----

LinuxCNC considère tous les paramètres numérotés entre #1 est #30 comme
étant des paramètres appelables, de même, ngcgui fourni des boites de saisie
pour n'importe quel paramètres dans cette fourchette. Il est de bonne
pratique d'éviter d'utiliser un paramètre numéroté de #1 jusqu'à #30
n'importe où ailleurs dans le sous-programme. L'utilisation de paramètres
nommés locaux est recommandée pour toutes le variables internes.

Chaque définition de déclaration peut optionnellement inclure un commentaire
spécial et une valeur par défaut pour le paramètre.

.Prototypage de déclaration
----
#<vname> = #n (=valeur_par_défaut)
ou
#<vname> = #n (texte_de_commentaire)
ou
#<vname> = #n (=valeur_par_défaut texte_de_commentaire)
----

.Exemples de paramètres
----
#<xparm> = #1 (=0.0)
#<yparm> = #2 (Ystart)
#<zparm> = #3 (=0.0 Z start setting)
----

Si une valeur_par_défaut est donnée, elle sera placée au démarrage, dans la
boîte de saisie pour le paramètre.

Si un texte_de_commentaire est inclus, il sera utilisé pour identifier
l'entrée à la place du nom du paramètre.

.Paramètres nommés globaux
Note sur les paramètres nommés globaux (#<nom_global>) avec ngcgui:

(paramètres nommés globaux ont un tiret bas dans leur nom, comme
#<_unnomglobal>)

Comme dans de nombreux langages de programmation, l'utilisation de variables
globales est puissante, mais peut souvent mener à des conséquences
inattendues. Dans LinuxCNC, les paramètres nommés globaux existants seront
valides lors de l'exécution du sous-programme et les sous-programmes peuvent
les modifier ou en créer.

L'utilisation de paramètres nommé globaux comme entrées dans un
sous-programme est déconseillé parce-que de tels usages requiert
l'établissement et la maintenance d'un contexte global bien défini, ce qui
est problématique à maintenir. L'utilisation de paramètres numérotés en #1
et #30 devrait être suffisant pour satisfaire les besoins les plus
exigeants.

Bien que les entrées par paramètres nommés globaux soient déconseillées, les
sous-programmes LinuxCNC doivent utiliser des paramètres nommés globaux pour
retourner les résultats. Puisque les sous-fichiers compatibles ngcgui sont
destinés à l'usage de l'interface graphique, les valeurs de retour n'ont pas
d'exigence commune. Toutefois, ngcgui est utile comme outil de test pour les
sous-programmes qui ne retournent pas de paramètres nommés globaux et il est
commun pour les sous-fichiers compatibles ngcgui d'appeler des fichiers de
sous-programmes utilitaires qui eux retournent des résultats avec des
paramètres nommés globaux.

Pour supporter ces usages, ngcgui ignore les paramètres nommés globaux qui
incluent le caractère (:) dans leur nom. Utilisation des deux points (:)
dans un nom prévient ngcgui de créer une bîte de saisie pour ces paramètres.

.Paramètres nommés globaux
----
o<exemp> sub
...
#<_exemp:result> = #5410       (retourne le diamètre de l'outil courant)
...
o<helper> call [#<x1>] [#<x2>] (appel d'un sous-programme)
#<xresult> = #<_helper:answer> (localise immédiatement le résultat du fichier d'aide)
#<_helper:answer> = 0.0 (rend nul le paramètre nommé global utilisé par le sous-programme)
...
o<exemp> endsub
----

Dans l'exemple précédent, le sous-programme utilitaire sera trouvé dans un
fichier séparé nommé helper.ngc. Le sous-programme d'aide retourne un
résultat dans un paramètre nommé global nommé #<_helper:answer>.

Pour une bonne pratique, le sous-fichier appelant localise immédiatement le
résultat pour une utilisation ailleurs dans le sous-fichier et le paramètre
nommé global, utilisé pour retourner le résultat est mis à zéro pour
diminuer les chances qu'il soit utilisé par inadvertance ailleurs dans le
contexte global. (La mise à zéro avec 0.0 n'est pas toujours le meilleur
choix).

Ngcgui supporte la création et la concaténation de multiples fonctions pour
un sous-fichier et pour de multiples sous-fichiers. Il est parfois pratique
pour les sous-fichiers de déterminer leur ordre au début de l'exécution afin
que ngcgui insère un paramètre global spécial qui pourra être testé par tous
les sous-programmes. Ce paramètre est nommé #<_feature:>. Sa valeur commence
avec 0 et est incrémentée avec chaque fonction qui lui est ajoutée.

.Fonctions additionnelles
Un commentaire spécial 'info' peut être inclus quelque part dans les
sous-fichier compatibles ngcgui. Le format est le suivant:

----
(info: info_text)
----

La chaîne 'info_text' est affichée vers le haut de la page de l'onglet
ngcgui dans Axis.

Les fichiers non destinés à servir de sous-fichiers peuvent inclure le
commentaire spécial: "(not_a_subfile)" de sorte que ngcgui les rejette
automatiquement avec un message explicatif.

----
(not_a_subfile)
----

Un fichier image optionnel (.png, .gif, .jpg, .pgm) peut accompagner un
sous-fichier. Le fichier image peut aider à clarifier les paramètres
utilisés par le sous-fichier. Le fichier image doit être dans le même
répertoire que le sous-fichier et doit avoir le même nom avec une extension
appropriée au fichier image, ex: le sous-fichier exemp.ngc doit être
accompagné par l'image exemp.png. Ngcgui tente de redimensionner de grandes
images par sous-échantillonnage à une largeur maximale de 320 et une hauteur
maximum de 240 pixels.

Aucune des conventions nécessaires pour faire une sous-fichier compatible
ngcgui n'empêche son utilisation en tant que fichier de sous-programme pour
LinuxCNC.

La distribution LinuxCNC inclus une librairie (répertoire ngcgui_lib) qui
contient plusieurs exemples de sous-fichiers et de fichiers utilitaires
compatibles ngcgui pour illustrer les fonctions des sous-programmes de
LinuxCNC et l'usage de ngcgui.

Des sous-programmes additionnels soumis par les utilisateurs se trouvent sur
le forum dans la section 'Subroutines'.

=== Exigences du Méta compilateur de G-code (.gcmc)
Les fichiers pour le méta compilateur de G-code (GCMC) sont lus par ngcgui,
il crée des zones de saisie pour étiqueter les variables dans le
fichier. Quand une fonction pour le fichier est finalisée, ngcgui passe le
fichier comme entrée pour le compilateur de GCMC et, si la compilation
réussit, le fichier G-code résultant est envoyé à LinuxCNC pour
exécution. Le fichier résultant est formaté comme un seul fichier
sous-programme; les fichiers .gcmc et les fichiers .ngc peuvent être
mélangés par ngcgui.

Les variables identifiées pour inclusion dans ngcgui sont étiquetées avec
des lignes qui apparaîtront comme des commentaires pour le compilateur de
GCMC.

.Exemple de formats d'étiquette de variable
----
//ngcgui: varname1 = 
//ngcgui: varname2 = value2
//ngcgui: varname3 = value3, label3;
----

.Exemples:
----
//ngcgui: zsafe =
//ngcgui: feedrate = 10
//ngcgui: xl = 0, x limit
----
Dans ces exemples, la zone de saisie pour varname1 n'aura pas de valeur par
défaut, la zone de saisie pour varname2 aura par défaut  valeur2, et celle
de varname3 aura par défaut valeur3 avec un label3 comme étiquette (au lieu
de varname3). Les valeurs par défaut doivent être des nombres.

Pour rendre plus facile à modifier les lignes valides dans un fichier de
GCMC, le formats alternatif 'tag line' est accepté. Les formats alternatifs
sont le point virgule (;) et les marqueurs de commentaire (//) Avec cette
disposition, il est souvent possible de simplement ajouter l'étiquette
//ngcgui: aux lignes existantes dans un fichier .gcmc.

.Exemple de formats d'étiquette alternatifs
----
//ngcgui: varname2 = value2;
//ngcgui: varname3 = value3; //, label3;
----
.Exemples:
----
//ngcgui: feedrate = 10;
//ngcgui: xl = 0; //, x limit
----

Une ligne d'information qui apparaîtra en haut d'une page d'onglets, peut
être éventuellement incluse avec une ligne étiquetée comme:

.Info tag
----
//ngcgui: info: text_to_appear_at_top_of_tab_page
----

Si nécessaire, les options peuvent être passées au compilateur de GCMC avec
une ligne étiquetée:

.Format de ligne étiquetée
----
//ngcgui: -option_name [ [=] option_value]
----
.Exemples:
----
//ngcgui: -I
//ngcgui: --imperial
//ngcgui: --precision 5
//ngcgui: --precision=6
----

Options pour que gcmc soit accessible depuis une commande du terminal:
----
gcmc --help
----

Un programme gcmc utilise le mode métrique par défaut. Le mode peut être
réglé en pouces avec le réglage suivant:

----
//ngcgui: --imperial
----

Un fichier de préambule, si utilisé, peut définir un mode (G20 ou G21) qui
entre en conflit avec le mode utilisé par un fichier de GCMC. Pour s'assurer
que le mode de programme de GCMC est actif, inclure la mention suivante dans
le fichier .gcmc:

----
include("ensure_mode.gcmc")
----

et fournir un chemin correct pour include_files dans le fichier ini, par
exemple:

----
[DISPLAY]
GCMC_INCLUDE_PATH = ../../nc_files/gcmc_lib
----

== Exemple, découpe pour DB25

L'exemple ci-dessous montre l'utilisation du sous-programme DB25. Dans la
première image on voit les champs remplis pour chaque variable.

image::images/ngcgui-db25-1_fr.png[]

Cette image montre le parcours d'outil du sous-programme DB25.

image::images/ngcgui-db25-2_fr.png[]

Cette image montre l'action du bouton 'Nouveau' et de l'onglet personnalisé
pour créer très facilement la découpe de trois DB25 en un seul programme.

image::images/ngcgui-db25-3_fr.png[]

