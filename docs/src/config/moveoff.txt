= Moveoff Component

[[cha:moveoff]]

The moveoff Hal component is a Hal-only method
for implementing offsets.  See the manpage (man moveoff)
for the IMPORTANT limitations and warnings.

The moveoff component is used to offset joint positions using custom Hal
connections.  Implementing an offset-while-program-is-paused functionality is
supported with appropriate connections for the input pins.  Nine joints are
supported.

The axis offset pin values (offset-in-M) are continuously applied (respecting
limits on value, velocity, and acceleration) to the output pins
(offset-current-M, pos-plusoffset-M, fb-minusoffset-M) when both enabling input
pins (apply-offsets and move-enable) are TRUE.  The two enabling inputs are
anded internally.   A 'warning pin' is set and a message issued if the
apply-offsets pin is deasserted while offsets are applied.  The warning pin
remains TRUE until the offsets are removed or the apply-offsets pin is set.

Typically, the move-enable pin is connected to external controls and the
apply-offsets pin is connected to halui.program.is-paused (for offsets only
while paused) or set to TRUE (for continuously applied offsets).

Applied offsets are 'automatically returned' to zero (respecting limits)
when either of the enabling inputs is deactivated.  The zero value
tolerance is specified by the epsilon input pin value.

Waypoints are recorded when the moveoff componenent is enabled.  Waypoints are
managed with the waypoint-sample-secs and waypoint-threshold pins.  When the
backtrack-enable pin is TRUE, the auto-return path follows the recorded
waypoints.  When the memory available for waypoints is exhausted, offsets are
frozen and the waypoint-limit pin is asserted.  This restriction applies
regardless of the state of the backtrack-enable pin.  An enabling pin must be
deasserted to allow a return to the original (non-offset position).

Backtracking through waypoints results in 'slower' movement rates as the
moves are point-to-point respecting velocity and acceleration settings.  The
velocity and acceleration limit pins can be managed dynamically to control
offsets at all times.

When backtrack-enable is FALSE, the auto-return move is *NOT*
coordinated, each axis returns to zero at its own rate.  If a controlled path
is wanted in this condition, each axis should be manually returned to zero
before deasserting an enabling pin.

The waypoint-sample-secs, waypoint-threshold, and epsilon pins are evaluated
only when the component is idle.

The offsets-applied output pin is provided to indicate the current state to a
GUI so that program resumption can be managed.  If the offset(s) are non-zero
when the apply-offsets pin is deasserted (for example when resuming a program
when offsetting during a pause), offsets are returned to zero (respecting
limits) and an 'Error' message is issued.

[CAUTION]
If offsets are enabled and applied and the machine is turned off for any
reason, any 'external' Hal logic that manages the enabling pins and the
offset-in-M inputs is responsible for their state when the machine is
subsequently turned on again.

This Hal-only means of offsetting is typically not known to LinuxCNC
nor available in GUI preview displays. *No protection is provided* for
offset moves that exceed soft limits managed by LinuxCNC. Since soft limits
are not honored, an offset move may encounter hard limits (or *CRASH* if
there are no limit switches). Use of the offset-min-M and offset-max-M inputs
to limit travel is recommended. Triggering a hard limit will turn off
the machine -- see *Caution* above.

The offset-in-M values may be set with inifile settings, controlled by a GUI,
or managed by other Hal components and connections.  Fixed values may be
appropriate in simple cases where the direction and amount of offset is
well-defined but a control method is required to deactivate an enabling
pin in order to return offsets to zero.  GUIs may provide means for users to
set, increment, decrement, and accumulate offset values for each axis and may
set offset-in-M values to zero before deasserting an enabling pin.

The default values for accel, vel, min, max, epsilon, waypoint-sample-secs, and
waypoint-threshold may not be suitable for any particular application.  This
Hal component is unaware of limits enforced elsewhere by LinuxCNC.
Users should test usage in a simulator application and understand all
hazards before use on hardware.


Sim configurations that demonstrate the component and a
gui (moveoff_gui) are located in:

* configs/sim/axis/moveoff     (axis-ui)
* configs/sim/touchy/ngcgui    (touchy-ui)


== Modifying an existing configuration

An existing configuration can be modified to use moveoff_gui
as follows:

. Make inifile entries for HALUI and LIB:hookup_moveoff.tcl.
  The entry for hookup_moveoff.tcl should follow HALFILES
  that connect the pins for axis.N.motor-pos-cmd, axis.N.motor-pos-fb,
  and components connected to these pins (pids and encoders
  typically).

----
[HAL]
HALUI = halui
...
HALFILE = LIB:hookup_moveoff.tcl
----

. Add inifile entries for the per-axis settings for
  each axis in use (If an entry is not defined, the
  corresponding entry from the [AXIS_n} section
  will be used, if no entry is found, then the moveoff
  component default is used(NOT RECOMMENDED)):

----
[MOVEOFF_n]
MAX_LIMIT =
MIN_LIMIT =
MAX_VELOCITY =
MAX_ACCELERATION =
----

. Add inifile entries for moveoff component settings
  (omit to use moveoff defaults):

----
[MOVEOFF]
EPSILON =
WAYPOINT_SAMPLE_SECS =
WAYPOINT_THRESHOLD =
----

. Add inifile entries to start the gui:

----
[APPLICATIONS]
# Note: a delay may be required if there are [HAL]POSTGUI_HALFILE dependencies
DELAY = 0
APP = moveoff_gui option1 option2 ...
----

For details on available Options, Use:

----
$ moveoff_gui --help

Usage:
moveoff_gui [Options]

Options:
    [--help | -? | -- -h ]  (This text)

    [-mode [onpause | always]]  (default: onpause)
                                  (onpause: show gui when program paused)
                                  (always:  show gui always)

    [-axes axisnames]       (default: xyz (no spaces))
                              (letters from set of: x y z a b c u v w)
                              (example: -axes z)
                              (example: -axes xz)
                              (example: -axes xyz)
    [-inc incrementvalue]   (default: 0.001 0.01 0.10 1.0 )
                              (specify one per -inc (up to 4) )
                              (example: -inc 0.001 -inc 0.01 -inc 0.1 )
    [-size integer]         (default: 14
                              (Overall gui popup size is based on font size)
    [-loc center|+x+y]      (default: center)
                              (example: -loc +10+200)
    [-autoresume]           (default: notused)
                              (resume program when move-enable deasserted)
    [-delay delay_secs]     (default: 5 (resume delay))

Options for special cases:
    [-noentry]              (default: notused)
                              (don't create entry widgets)
    [-no_resume_inhibit]    (default: notused)
                              (do not use a resume-inhibit-pin)
    [-no_pause_requirement] (default: notused)
                              (no check for halui.program.is-paused)
    [-no_cancel_autoresume] (default: notused)
                              (useful for retraact offsets with simple)
                              (external control                       )
    [-no_display]           (default: notused)
                              (Use when both external controls and displays)
                              (are in use (see Note))                      )

Note: If the moveoff move-enable pin (mv.move-enable) is connected when
      moveoff_gui is started, external controls are required and only
      displays are provided.
----

The moveoff_gui will provide a display and and control for
enabling offsetting if the pin mv.move-enable is NOT connected
when moveoff_gui is started.

If the mv.move-enable pin is connected when moveoff_gui
is started, the gui will provide a display but no controls.
This mode supports Hal connections for a jog wheel or other
methods of controlling the enable and offset input pins
(mv.move-enable, mv.offset-M, mv.backtrack-enable).

If the halfile LIB:hookup_moveoff.tcl is used to load and connect the
moveoff component, the mv.move-enable pin is not connected and
local controls provided by moveoff_gui will be used.  To enable external
controls, subsequent halfiles should connect the mv.move-enable pin.
For example, the configs/sim/* demo configurations use a simple halfile
to connect the mv.move-enable,mv.offset-in-M, and  mv.bactrack-enable
pins to signals:

----
[HAL]
HALUI = halui
...
HALFILE = LIB:hookup_moveoff.tcl
HALFILE = LIB:moveoff_external.hal
----
