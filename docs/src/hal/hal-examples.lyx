#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

HAL Examples
\begin_inset LatexCommand \label{cha:HAL-Examples}

\end_inset 


\layout Standard

Most of these examples assume you are starting with a Stepconf based configurati
on and have two threads base-thread and servo-thread.
 The Stepconf wizard will create an empty custom.hal and a custom_postgui.hal
 file.
 The custom.hal file will be loaded after the configuration hal file and
 the custom_postgui.hal file is loaded after the GUI has been loaded.
 
\layout Section

Manual Toolchange
\begin_inset LatexCommand \label{sec:Manual-Toolchange}

\end_inset 


\layout Standard

In this example it is assumed that your "rolling your own" configuration
 and wish to add the HAL Manual Toolchange window.
 The HAL Manual Toolchange is primarily useful if you have presettable tools
 and you store the offsets in the tool table.
 If you need to touch off for each tool change then it is best just to split
 up your g code.
 To use the HAL Manual Toolchange window you basically have to load the
 hal manualtoolchange component then send the iocontrol "tool change" to
 the hal manualtoolchange "change" and send the hal manualtoolchange "changed"
 back to the iocontrol "tool changed".
\layout Standard

This is an example of 
\series bold 
with
\series default 
 the HAL Manual Toolchange from the Stepconf wizard
\layout LyX-Code

loadusr -W hal_manualtoolchange
\layout LyX-Code

net tool-change iocontrol.0.tool-change => hal_manualtoolchange.change
\layout LyX-Code

net tool-changed iocontrol.0.tool-changed <= hal_manualtoolchange.changed
\layout LyX-Code

net tool-number iocontrol.0.tool-prep-number => hal_manualtoolchange.number
\layout LyX-Code

net tool-prepare-loopback iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
\layout LyX-Code

\layout Standard

This is an example of 
\series bold 
without
\series default 
 the HAL Manual Toolchange from the Stepconf wizard
\layout LyX-Code

net tool-number <= iocontrol.0.tool-prep-number
\layout LyX-Code

net tool-change-loopback iocontrol.0.tool-change => iocontrol.0.tool-changed
\layout LyX-Code

net tool-prepare-loopback iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
\layout LyX-Code

\layout Section

Compute Velocity
\begin_inset LatexCommand \label{sec:Compute-Velocity}

\end_inset 


\layout Standard

This example uses "ddt", "mult2" and "abs" to compute the velocity of a
 single axis.
 For more information on the real time components see the man pages or the
 Realtime Components section (
\begin_inset LatexCommand \ref{sec:Realtime-Components}

\end_inset 

).
\layout Standard

The first thing is to check your configuration to make sure you are not
 using any of the real time components all ready.
 You can do this by opening up the HAL Configuration window and look for
 the components in the pin section.
 If you are then find the .hal file that they are being loaded in and increase
 the counts and adjust the instance to the correct value.
 Add the following to your custom.hal file.
 
\layout Standard

Load the realtime components.
 
\layout Quote

loadrt ddt count=1
\newline 
loadrt mult2 count =1
\newline 
loadrt abs count=1
\layout Standard

Add the functions to a thread so it will get updated.
\layout Quote

addf ddt.0 servo-thread
\newline 
addf mult2.0 servo-thread
\newline 
addf abs.0 servo-thread
\layout Standard

Make the connections.
\layout Quote

setp mult2.in1 60
\newline 
net xpos-cmd ddt.0.in
\newline 
net X-IPS mult2.0.in0 <= ddt.0.out
\newline 
net X-ABS abs.0.in <= mult2.0.out
\newline 
net X-IPM abs.0.out
\layout Standard

In this last section we are setting the mult2.0.in1 to 60 to convert the inch
 per second to inch per minute that we get from the ddt.0.out.
 
\layout Standard

The xpos-cmd sends the commanded position to the ddt.0.in.
 The ddt computes the derivative of the change of the input.
 
\layout Standard

The ddt2.0.out is multiplied by 60 to give IPM.
 
\layout Standard

The mult2.0.out is sent to the abs to get the absolute value.
 
\layout Standard

The following figure shows the result when the X axis is moving at 15 IPM
 in the minus direction.
 Notice that we can get the absolute value from either the abs.0.out pin or
 the X-IPM signal.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Caption

Velocity Example
\begin_inset LatexCommand \label{cap:Velocity-Example}

\end_inset 


\layout Standard
\align center 

\begin_inset Graphics
	filename images/velocity-01.png
	scale 70

\end_inset 


\end_inset 


\layout Section
\pagebreak_top 
Soft Start
\begin_inset LatexCommand \label{sec:Soft-Start}

\end_inset 


\layout Standard

This example shows how the HAL components "lowpass", "limit2" or "limit3"
 can be used to limit how fast a signal changes.
 
\layout Standard

In this example we have a servo motor driving a lathe spindle.
 If we just used the commanded spindle speeds on the servo it will try and
 go from present speed to commanded speed as fast as it can.
 This could cause a problem or damage the drive.
 To slow the rate of change we can send the motion.spindle-speed-out through
 a limiter before the PID, so that the PID command value varies slowly.
 
\layout Standard

Three built-in components that limit a signal are:
\layout Description

limit2 limits the range and first derivative of a signal.
 
\layout Description

limit3 limits the range, first and second derivatives of a signal.
 
\layout Description

lowpass uses an exponentially-weighted moving average to track an input
 signal.
 
\layout Standard

To find more information on these HAL components check the man pages.
\layout Standard

Place the following in a text file called softstart.hal.
 If your not familiar with Linux place the file in your home directory.
\layout Quote

##############################
\newline 
loadrt threads period1=1000000 name1=thread 
\newline 
loadrt siggen 
\newline 
loadrt lowpass 
\newline 
loadrt limit2 
\newline 
loadrt limit3 
\newline 
net square siggen.0.square => lowpass.0.in limit2.0.in limit3.0.in 
\newline 
net lowpass <= lowpass.0.out 
\newline 
net limit2 <= limit2.0.out 
\newline 
net limit3 <= limit3.0.out 
\newline 
setp siggen.0.frequency .1 
\newline 
setp lowpass.0.gain .01 
\newline 
setp limit2.0.maxv 2 
\newline 
setp limit3.0.maxv 2 
\newline 
setp limit3.0.maxa 10 
\newline 
addf siggen.0.update thread 
\newline 
addf lowpass.0 thread 
\newline 
addf limit2.0 thread 
\newline 
addf limit3.0 thread 
\newline 
start 
\newline 
loadusr halscope
\newline 
##############################
\layout Standard

Open a terminal window and run the file with the following command.
\layout Quote

halrun -I softstart.hal
\layout Standard

When the HAL Oscilloscope first starts up click "OK" to accept the default
 thread.
 
\layout Standard

Next you have to add the signals to the channels.
 Click on channel 1 then select "square" from the Signals tab.
 Repeat for channels 2-4 and add lowpass, limit2, and limit3.
\layout Standard

Next to set up a trigger signal click on the Source None button and select
 square.
 The button will change to Source Chan 1.
\layout Standard

Next click on Single in the Run Mode radio buttons box.
 This will start a run and when it finishes you will see your traces.
\layout Standard

To separate the signals so you can see them better click on a channel then
 use the Pos slider in the Vertical box to set the positions.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Caption

Softstart
\begin_inset LatexCommand \label{cap:Softstart}

\end_inset 


\layout Standard
\align center 

\begin_inset Graphics
	filename images/softstart-scope.png
	scale 70

\end_inset 


\end_inset 


\layout Standard

To see the effect of changing the set point values of any of the components
 you can change them in the terminal window.
 To see what different gain settings do for lowpass just type the following
 in the terminal window and try different settings.
\layout Quote

setp lowpass.0.gain .01
\layout Standard

After changing a setting run the oscilloscope again to see the change.
\layout Standard

When your finished type "exit" in the terminal window to shut down halrun
 and close the halscope.
 Don't close the terminal window with halrun running as it might leave some
 things in memory that could prevent EMC from loading.
\layout Standard

For more information on HalScope see the HAL manual.
\layout Section

Debounce
\layout Standard

The debounce component is used to filter a noisy digital input.
 
\layout Standard

The debounce filter works by incrementing a counter whenever the input is
 true, and decrementing the counter when it is false.
 If the counter decrements to zero, the output is set false and the counter
 ignores further decrements.
 If the counter increments up to a threshold, the output is set true and
 the counter ignores further increments.
 If the counter is between zero and the threshold, the output retains its
 previous state.
 The threshold determines the amount of filtering: a threshold of 1 does
 no filtering at all, and a threshold of N requires a signal to be present
 for N samples before the output changes state.
\layout Standard

The debounce components are created in groups with the size of the group
 determined by the configuration when loaded.
 This allows the integrator to set the parameters of a group with one line
 in the HAL file and to add the group to a thread with one line.
 In the following example 2 groups are created with 2 filters to show how
 the addressing works.
 If your using a Stepconf Wizard generated configuration put the following
 in your custom.hal file.
\layout LyX-Code

# load the debounce component
\newline 
loadrt debounce cfg=2,2
\layout LyX-Code

# add each debounce group to different threads just for an example
\newline 
addf debounce.0 servo-thread
\newline 
addf debounce.1 base-thread
\layout LyX-Code

# set the debounce delay for group 0 to two cycles of the servo-thread
\newline 
setp debounce.0.delay 2
\layout LyX-Code

# set the debounce delay for group 1 to three cycles of the base-thread
\newline 
setp debounce.1.delay 3
\layout Standard

Now when you run EMC and look in the HAL Configuration window you will see
 the two debounce groups.
\layout Standard


\begin_inset Float figure
placement H
wide false
collapsed false

\layout Caption

Debounce Groups
\begin_inset LatexCommand \label{cap:Debounce-Groups}

\end_inset 


\layout Standard
\align center 

\begin_inset Graphics
	filename images/debounce.png
	scale 70

\end_inset 


\end_inset 


\layout LyX-Code

\layout Standard

Now lets say we want to debounce an encoder signal from phase Z that is
 coming into EMC via the parallel port pin 13.
 First we have to remove the link to the pins then run them through the
 debounce then out to the component.
 If your using a Stepconf Wizard generated configuration put the following
 in your custom.hal file.
\layout LyX-Code

# unlink the encoder and parallel port pins
\newline 
unlinkp encoder.0.phase-Z
\newline 
unlinkp parport.0.pin-13-in
\layout LyX-Code

# create a new signal and link the parallel port to the debounce component
\newline 
net filter-p-13 <= parport.0.pin-13-in => debounce.1.0.in
\layout LyX-Code

# create a new signal and send the filtered output to the encoder input
\newline 
net filtered-p-13 <= debounce.1.0.out => encoder.0.phase-Z
\layout Standard

Now if you have more pins to filter it is lather rinse repeat.
 If your encoder is on the base-thread then you want to put the debounce
 on the same thread usually so the timings are the same.
 You can look in the main hal file to see where a component is added to
 a function with addf.
\layout LyX-Code

\layout LyX-Code

\layout LyX-Code

\the_end
