#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Chapter

Spindle Control
\begin_inset LatexCommand \label{cha:Spindle-Control}

\end_inset 


\layout Section

0-10v Spindle Speed
\layout Standard

If your spindle is controlled by a VFD with a 0 to 10 volt signal and your
 using a DAC card like the m5i20 to output the control signal.
 
\layout Standard

First you need to figure the scale of spindle speed to control signal.
 For this example the spindle top speed of 5000 RPM is equal to 10 volts.
 
\begin_inset Formula $10/5000=0.002$
\end_inset 

 so our scale factor is 0.002
\layout Standard

We have to add a scale component to the hal file to scale the motion.spindle-spee
d-out to the 0 to 10 needed by the VFD if your DAC card does not do scaling.
\layout Quote

loadrt scale count=1
\newline 
addf scale.0 servo-thread
\newline 
setp scale.0.gain 0.002
\newline 
net spindle-speed-scale motion.spindle-speed-out => scale.0.in
\newline 
net spindle-speed-DAC scale.0.out => <your DAC pin name>
\layout Section

PWM Spindle Speed
\layout Standard

If your spindle can be controlled by a PWM signal, use the pwmgen component
 to create the signal:
\layout Quote

loadrt pwmgen output_type=0 
\newline 
addf pwmgen.update servo-thread
\newline 
addf pwmgen.make-pulses base-thread
\newline 
net spindle-speed-cmd motion.spindle-speed-out => pwmgen.0.value
\newline 
net spindle-on motion.spindle-on => pwmgen.0.enable
\newline 
net spindle-pwm pwmgen.0.pwm => parport.0.pin-09-out
\newline 
setp pwmgen.0.scale 1800 # Change to your spindle's top speed in RPM 
\layout Standard

This assumes that the spindle controller's response to PWM is simple: 0%
 PWM gives 0RPM, 10% PWM gives 180 RPM, etc.
 If there is a minimum PWM required to get the spindle to turn, follow the
 example in the nist-lathe sample configuration to use a scale component.
 
\layout Section

Spindle Enable
\layout Standard

If you need a spindle enable signal link your output pin to motion.spindle-on.
 To link these pins to a parallel port pin put something like the following
 in your .hal file making sure you pick the pin that is connected to your
 control device.
\layout Quote

net spindle-enable motion.spindle-on => parport.0.pin-14-out
\layout Section

Spindle Direction
\layout Standard

If you have direction control of your spindle the hal pins motion.spindle-forward
 and motion.spindle-reverse are controlled by M3 and M4.
 S must be set to a positive non zero value for M3/4 to turn on spindle
 motion.
 
\layout Standard

To link these pins to a parallel port pin put something like the following
 in your .hal file making sure you pick the pin that is connected to your
 control device.
\layout Quote

net spindle-fwd motion.spindle-forward -> parport.0.pin-16-out
\newline 
net spindle-rev motion.spindle-reverse => parport.0.pin-17-out
\layout Section

Spindle Soft Start
\layout Standard

If you need to ramp your spindle speed command and your control does not
 have that feature it can be done in HAL.
 Basically you need to hijack the output of motion.spindle-speed-out and
 run it through a limit2 component with the scale set so it will ramp the
 rpm from motion.spindle-speed-out to your device that receives the rpm.
 The second part is to let EMC know when the spindle is at speed so motion
 can begin.
\layout Standard

In the 0-10 volt example the line "net spindle-speed-scale motion.spindle-speed-o
ut => scale.0.in" is changed as shown in the following example.
\layout LyX-Code

# load real time a limit2 and a near with names so it is easier to follow
\newline 
loadrt limit2 names=spindle-ramp
\newline 
loadrt near names=spindle-at-speed
\layout LyX-Code

# add the functions to a thread
\newline 
addf spindle-ramp servo-thread
\newline 
addf spindle-at-speed servo-thread
\layout LyX-Code

# set the parameter for max velocity
\newline 
setp spindle-ramp.maxv 60
\layout LyX-Code

# hijack the spindle speed out and send it to spindle ramp in
\newline 
net spindle-cmd <= motion.spindle-speed-out => spindle-ramp.in
\layout LyX-Code

# the output of spindle ramp is sent to the scale in
\newline 
net spindle-ramped <= spindle-ramp.out => scale.0.in
\layout LyX-Code

# to know when to start the motion we send the near component 
\newline 
# (named spindle-at-speed) to the spindle commanded speed from
\newline 
# the signal spindle-cmd and the actual spindle speed
\newline 
# provided your spindle can accelerate at the maxv setting.
\newline 
net spindle-cmd => spindle-at-speed.in1
\newline 
net spindle-ramped => spindle-at-speed.in2
\newline 
# the output from spindle-at-speed is sent to motion.spindle-at-speed
\newline 
# and when this is true motion will start
\newline 
net spindle-ready <= spindle-at-speed.out => motion.spindle-at-speed
\layout LyX-Code

\layout Chapter

Spindle Feedback
\begin_inset LatexCommand \label{cha:Spindle-Feedback}

\end_inset 


\layout Standard

Spindle feedback is needed by EMC to perform any spindle coordinated motions
 like threading and constant surface speed.
 The StepConf Wizard can perform the connections for you if you select Encoder
 Phase A and Encoder Index as inputs.
\layout Standard

Hardware assumptions:
\layout Itemize

An encoder is connected to the spindle and puts out 100 pulses per revolution
 on phase A
\layout Itemize

The encoder A phase is connected to the parallel port pin 10
\layout Itemize

The encoder index pulse is connected to the parallel port pin 11
\layout Standard

Basic Steps to add the components and configure them:
\layout LyX-Code

loadrt encoder num_chan=1
\newline 
addf encoder.update-counters base-thread
\newline 
addf encoder.capture-position servo-thread
\newline 
setp encoder.0.position-scale 100
\newline 
net spindle-position encoder.0.position => motion.spindle-revs
\newline 
net spindle-velocity encoder.0.velocity => motion.spindle-speed-in
\newline 
net spindle-index-enable encoder.0.index-enable <=> motion.spindle-index-enable
\newline 
net spindle-phase-a encoder.0.phase-A
\newline 
net spindle-phase-b encoder.0.phase-B
\newline 
net spindle-index encoder.0.phase-Z
\newline 
net spindle-phase-a <= parport.0.pin-10-in
\newline 
net spindle-index <= parport.0.pin-11-in
\the_end
