#!/bin/bash
#
# This script is used to test/demo the Hardware Abstraction Layer
#
# There are actually a number of demos, and right now they may
# change frequently.  To avoid cluttering up the scripts directory,
# this file contains all the demos.  Select the one you want by
# giving an argument.  For example, "hal_demo jogwheel" will run
# the jogwheel demo.
#
# if you don't specify a demo, this prints a usage message
if [ ! $1 ] ; then
    echo "Usage:  scripts/hal_demo <demo_name>"
    echo "Run from the emc2 directory only"
    echo "Many demos require root privileges to load and/or"
    echo "unload kernel modules - log in as root, or use:"
    echo "  su -c \"scripts/hal_demo <demo_name>\""
    # print the list of demos
    scripts/hal_demo list
    exit 0
fi
#
# the first demo isn't a real demo - it simply lists all the demos
#
if [ $1 == list ] ; then
    echo "Available demos are:"
    echo "  list - prints this list"
    echo "  load - loads hal core modules"
    echo "  unload - unloads hal code modules"
    echo "  parport1 - an introductory demo - step by step"
    echo "  siggen - another introductory demo - signal generator"
    echo "  circle - complex demo - 2 axis circular moves"
    exit 0
fi
#
# The next two demos aren't really demos either - they simply
# load or unload the rtapi enviroment
#
# here is the "load" command
#
if [ $1 == load ] ; then
    # load the rtos and rtapi
    if ! scripts/load_rtapi ; then
        exit -1
    fi
    # done
    echo "RTAPI core loaded"
    exit 0
fi
#
# here is the "unload" command
#
if [ $1 == unload ] ; then
    # unload the rtos and rtapi
    if ! scripts/unload_rtapi ; then
        exit -1
    fi
    # done
    echo "RTAPI core unloaded"
    exit 0
fi
#
# We're almost ready for the real demos, first we must
# make sure the rtapi core is loaded
#
RTAPI_STR=`/sbin/lsmod | awk '{print $1}' | grep -x rtapi `
if [ ! "$RTAPI_STR" ] ; then
    echo "All of the demos require the RTAPI modules to"
    echo "be loaded.  Use 'hal_demo load' to load them."
    exit -1
fi
#
# The first demo: "parport1" simply tests the parallel port
# this one is a step by step, tutorial/intro to HAL concepts
#
if [ $1 == parport1 ] ; then
    echo "(Comments that are part of the demo are in parenthesis.)"
    echo "(This demo echos its commands to the screen so you can"
    echo " see what each step does.  Echoed commands start with '$')"
    read -p "Hit enter to install the hal_lib module"
    echo "$ /sbin/insmod rtlib/hal_lib.o"
    /sbin/insmod rtlib/hal_lib.o
    read -p "Hit enter to install the parport module with a 1mS thread"
    # change the 0278 if your port is at a different address
    echo "$ /sbin/insmod rtlib/parport.o period=1000000 cfg=\"0278\""
    /sbin/insmod rtlib/parport.o period=1000000 cfg="0278"
    read -p "Hit enter see the component list"
    echo "$ bin/halcmd show comp"
    bin/halcmd show comp
    read -p "Hit enter see the threads and functions"
    echo "$ bin/halcmd show thread"
    bin/halcmd show thread
    echo "(the period is in nano-seconds)"
    echo "$ bin/halcmd show funct"
    bin/halcmd show funct
    read -p "Hit enter to continue"
    echo "(connecting the parport read and write"
    echo " functions to the 1mS thread)"
    echo "$ bin/halcmd addf parport.1.read parport.thread"
    bin/halcmd addf parport.1.read parport.thread
    echo "$ bin/halcmd addf parport.1.write parport.thread"
    bin/halcmd addf parport.1.write parport.thread
    echo "(start the realtime thread)"
    echo "$ bin/halcmd start"
    bin/halcmd start
    read -p "Hit enter see the threads and functions again"
    echo "$ bin/halcmd show thread"
    bin/halcmd show thread
    echo "(thread now has functions attached)"
    echo "$ bin/halcmd show funct"
    bin/halcmd show funct
    echo "(functions have a non-zero users count)"
    read -p "Hit enter to see the pins"
    echo "$ bin/halcmd show pin"
    bin/halcmd show pin
    read -p "Hit enter to see the parameters"
    echo "$ bin/halcmd show param"
    bin/halcmd show param
    read -p "Hit enter to create some signals"
    echo "$ bin/halcmd newsig jumper1 bit"
    bin/halcmd newsig jumper1 bit
    echo "$ bin/halcmd newsig jumper2 bit"
    bin/halcmd newsig jumper2 bit
    echo "(signals created - lets look at them)"
    echo "$ bin/halcmd show sig"
    bin/halcmd show sig
    read -p "Hit enter to connect signals to pins"
    echo "(use signal jumper1 to connect input pin 10 to output pin 2)"
    echo "$ bin/halcmd linksp jumper1 parport.1.pin-10-in"
    bin/halcmd linksp jumper1 parport.1.pin-10-in
    echo "$ bin/halcmd linksp jumper1 parport.1.pin-02-out"
    bin/halcmd linksp jumper1 parport.1.pin-02-out
    echo "(connections made - lets take a look)"
    echo "$ bin/halcmd show sig"
    bin/halcmd show sig
    echo "(If you have a breakout board or other access to the port"
    echo " you can apply a signal to pin 10 and verify that pin 2"
    echo " follows it - updated every 1mS )"
    read -p "Hit enter to add another output"
    echo "$ bin/halcmd linksp jumper1 parport.1.pin-03-out"
    bin/halcmd linksp jumper1 parport.1.pin-03-out
    echo "(input pin 10 is now routed to output pins 2 and 3 )"
    echo "$ bin/halcmd show sig"
    bin/halcmd show sig
    read -p "Hit enter to invert the pin 3 output"
    echo "(invert pin 3 by setting a parameter of the parport module)"
    echo "$ bin/halcmd setp parport.1.pin-03-out-invert TRUE"
    bin/halcmd setp parport.1.pin-03-out-invert TRUE
    echo "(if you have access to the pins, you can verify"
    echo " that pin 3 is now inverted)"
    read -p "Hit enter to see the parameters"
    echo "$ bin/halcmd show param"
    bin/halcmd show param
    read -p "Hit enter to try halmeter"
    echo "(running halmeter, a GUI application - it should"
    echo " appear in another window.)"
    echo "(click on the select button, then select a pin, signal,"
    echo " or parameter to observe.  You can change what you are"
    echo " observing at any time.)"
    echo "(the meter updates approx. every 0.1 seconds - if you"
    echo " have access to the pins, change the input and halmeter"
    echo " will show the changes.)"
    echo "(an interesting paremeter to observe is parport.thread.time"
    echo " which is the most recent execution time of the thread in"
    echo " nanoseconds.  you should be able to see it change a little"
    echo " due to jitter and other factors."
    echo "(Click exit to shut down halmeter.)"
    echo "$ bin/halmeter"
    bin/halmeter
    read -p "Hit enter to finish the demo"
    echo "(deleting signals)"
    echo "$ bin/halcmd delsig jumper1"
    bin/halcmd delsig jumper1
    echo "$ bin/halcmd delsig jumper2"
    bin/halcmd delsig jumper2
    echo "(unloading the parport module)"
    echo "$ /sbin/rmmod parport"
    /sbin/rmmod parport
    echo "$ /sbin/rmmod hal_lib"
    /sbin/rmmod hal_lib
    exit 0
fi
#
# The next demo: "siggen" tests the signal generator component
# and halmeter.
# this one is also a step by step tutorial
#
if [ $1 == siggen ] ; then
    echo "(Comments that are part of the demo are in parenthesis.)"
    echo "(This demo echos its commands to the screen so you can"
    echo " see what each step does.  Echoed commands start with '$')"
    read -p "Hit enter to install the hal_lib module"
    echo "$ /sbin/insmod rtlib/hal_lib.o"
    /sbin/insmod rtlib/hal_lib.o
    read -p "Hit enter to install the siggen module with a 1mS thread"
    echo "$ /sbin/insmod rtlib/siggen.o fp_period=1000000"
    /sbin/insmod rtlib/siggen.o fp_period=1000000
    read -p "Hit enter see the component list"
    echo "$ bin/halcmd show comp"
    bin/halcmd show comp
    read -p "Hit enter see the threads and functions"
    echo "$ bin/halcmd show thread"
    bin/halcmd show thread
    echo "(the period is in nano-seconds)"
    echo "$ bin/halcmd show funct"
    bin/halcmd show funct
    read -p "Hit enter to continue"
    echo "(connecting the siggen update function to the 1mS thread)"
    echo "$ bin/halcmd addf siggen.1.update siggen.thread"
    bin/halcmd addf siggen.1.update siggen.thread
    echo "(start the realtime thread)"
    echo "$ bin/halcmd start"
    bin/halcmd start
    read -p "Hit enter see the threads and functions again"
    echo "$ bin/halcmd show thread"
    bin/halcmd show thread
    echo "(thread now has function attached)"
    echo "$ bin/halcmd show funct"
    bin/halcmd show funct
    echo "(function has a non-zero users count)"
    read -p "Hit enter to see the pins"
    echo "$ bin/halcmd show pin"
    bin/halcmd show pin
    read -p "Hit enter to see the parameters"
    echo "$ bin/halcmd show param"
    bin/halcmd show param
    read -p "Hit enter to change the frequency to 0.1Hz"
    echo "$ bin/halcmd setp siggen.1.frequency 0.1"
    bin/halcmd setp siggen.1.frequency 0.1
    read -p "Hit enter to see the parameters"
    echo "$ bin/halcmd show param"
    bin/halcmd show param
    read -p "Hit enter to try halmeter"
    echo "(running halmeter, a GUI application - it should"
    echo " appear in another window.)"
    echo "(click on the select button, then select a pin, signal,"
    echo " or parameter to observe.  You can change what you are"
    echo " observing at any time.)"
    echo "(the meter updates approx. every 0.1 seconds - if you"
    echo " select one of the output pins, you should see it go"
    echo " through a complete cycle every 10 seconds, since we"
    echo " set the frequency to 0.1Hz.)"
    echo "(Click exit to shut down halmeter.)"
    echo "$ bin/halmeter"
    bin/halmeter
    read -p "Hit enter to finish the demo"
    echo "(unloading the siggen module)"
    echo "$ /sbin/rmmod siggen"
    /sbin/rmmod siggen
    echo "$ /sbin/rmmod hal_lib"
    /sbin/rmmod hal_lib
    exit 0
fi
#
# The next demo: "circle" puts a bunch of components together
# to move in a circle.
#
if [ $1 == circle ] ; then
    echo "(This demo does not show each command step by step)"
    echo "(Examine the script to see how it works, it is"
    echo " extensively commented)"
    read -p "Hit enter to install the hal components"
    # install the hal library module
    /sbin/insmod rtlib/hal_lib.o
    # install parport module with a 50uS thread
    # change the 0278 if your port is at a different address
    /sbin/insmod rtlib/parport.o period=50000 cfg="0278"
    # install the siggen module with a 1mS thread"
    /sbin/insmod rtlib/siggen.o fp_period=1000000
    # install two PID loops
    /sbin/insmod rtlib/pid.o num_chan=2
    # install two step pulse generators, stepping type 0
    /sbin/insmod rtlib/stepgen.o cfg="0 0"
    #
    bin/halcmd show comp
    read -p "Hit enter set up the threads"
    #
    # set up the high speed thread
    # first read the parport inputs
    bin/halcmd addf parport.1.read parport.thread
    # then run the step generator
    bin/halcmd addf stepgen.make_pulses parport.thread
    # then write the parport outputs
    bin/halcmd addf parport.1.write parport.thread
    # set up the low speed thread
    # first run the signal generator to generate position references
    bin/halcmd addf siggen.1.update siggen.thread
    # next run stepgen position capture function to get position feedback
    bin/halcmd addf stepgen.capture_position siggen.thread
    # next run the pid loops
    bin/halcmd addf pid.1.do_pid_calcs siggen.thread
    bin/halcmd addf pid.2.do_pid_calcs siggen.thread
    # and finally run the step generator update function
    bin/halcmd addf stepgen.update_freq siggen.thread
    #
    bin/halcmd show thread
    bin/halcmd show funct
    read -p "Hit enter to create signals and connect pins"
    #
    # start with the position references - declare the signals
    bin/halcmd newsig x_pos_cmd float
    bin/halcmd newsig y_pos_cmd float
    # connect them to their sources - the signal generator outputs
    bin/halcmd linksp x_pos_cmd siggen.1.cosine
    bin/halcmd linksp y_pos_cmd siggen.1.sine
    # and connect them to their destinations - the PID command inputs
    bin/halcmd linksp x_pos_cmd pid.1.command
    bin/halcmd linksp y_pos_cmd pid.2.command
    # now the position feedback
    bin/halcmd newsig x_feedback float
    bin/halcmd newsig y_feedback float
    # connect them to their sources - the stepgen position output
    bin/halcmd linksp x_feedback stepgen.1.position
    bin/halcmd linksp y_feedback stepgen.2.position
    # and connect them to their destinations - the PID feedback inputs
    bin/halcmd linksp x_feedback pid.1.feedback
    bin/halcmd linksp y_feedback pid.2.feedback
    # the outputs of the PID loops are velocity commands
    bin/halcmd newsig x_vel_cmd float
    bin/halcmd newsig y_vel_cmd float
    # connect them to their sources - the PID outputs
    bin/halcmd linksp x_vel_cmd pid.1.output
    bin/halcmd linksp y_vel_cmd pid.2.output
    # and connect them to their destinations - the stepgen frequency inputs
    bin/halcmd linksp x_vel_cmd stepgen.1.velocity
    bin/halcmd linksp y_vel_cmd stepgen.2.velocity
    # now we need to route the step and direction signals
    bin/halcmd newsig x_step bit
    bin/halcmd newsig x_dir bit
    bin/halcmd newsig y_step bit
    bin/halcmd newsig y_dir bit
    # the sources - stepgen outputs
    bin/halcmd linksp x_step stepgen.1.step
    bin/halcmd linksp x_dir stepgen.1.dir
    bin/halcmd linksp y_step stepgen.2.step
    bin/halcmd linksp y_dir stepgen.2.dir
    # the destinations - parport pins
    # this set if lines configures for a Xylotex 3-axis card
    #bin/halcmd linksp x_step parport.1.pin-02-out
    #bin/halcmd linksp x_dir  parport.1.pin-03-out
    #bin/halcmd linksp y_step parport.1.pin-04-out
    #bin/halcmd linksp y_dir  parport.1.pin-05-out
    # this set if lines configures for the "standard" EMC pinout
    bin/halcmd linksp x_dir  parport.1.pin-02-out
    bin/halcmd linksp x_step parport.1.pin-03-out
    bin/halcmd linksp y_dir  parport.1.pin-04-out
    bin/halcmd linksp y_step parport.1.pin-05-out
    # there is one more signal to connect - the PID loops need
    # to be enabled
    bin/halcmd newsig enable bit
    bin/halcmd linksp enable pid.1.enable
    bin/halcmd linksp enable pid.2.enable
    # we'll use a parport input as a source for a TRUE bit
    bin/halcmd linksp enable parport.1.pin-10-in
    #
    bin/halcmd show sig
    read -p "Hit enter to set the parameters"
    # set the signal generator frequency to make a circle in 10 seconds
    bin/halcmd setp siggen.1.frequency 0.1
    # set the PID tuning
    bin/halcmd setp pid.1.Pgain 10
    bin/halcmd setp pid.1.FF1 1.0
    bin/halcmd setp pid.2.Pgain 10
    bin/halcmd setp pid.2.FF1 1.0
    # set the position feedback scaling - 800 steps = 1 machine unit
    bin/halcmd setp stepgen.1.position-scale 0.00125
    bin/halcmd setp stepgen.2.position-scale 0.00125
    # set velocity scaling - 1 unit/sec = 800 steps/sec
    bin/halcmd setp stepgen.1.velocity-scale 800
    bin/halcmd setp stepgen.2.velocity-scale 800
    #
    bin/halcmd show param
    read -p "Hit enter to start"
    #
    bin/halcmd start
    #
    echo
    echo "if you want to experiment, open another shell window."
    echo "you can use halmeter to look at things and halcmd to"
    echo "modify them"
    echo "for example, to change from 1 circle every 10 seconds"
    echo "to one circle every five seconds:"
    echo "bin/halcmd setp siggen.1.frequency 0.2"
    echo
    read -p "Hit enter to finish the demo"
    /sbin/rmmod siggen
    /sbin/rmmod parport
    /sbin/rmmod stepgen
    /sbin/rmmod pid
    /sbin/rmmod hal_lib
    exit 0
fi
#
#
# if we get here, the user asked for a non-existant demo
#
echo "Sorry, there is no demo called '$1'"
scripts/hal_demo
exit -1

